## translation metadata
# Based-On-Revision: 1.17
# Last-Translator: jens@kubieziel.de, peter@palfrader.org

#include "head.wmi" TITLE="Mithelfen"

<div class="main-column">

<!-- PUT CONTENT AFTER THIS TAG -->

<h2>Vier Sachen, die jeder tun kann</h2>

<ol>
  <li>Bitte überlege dir,
    einen <a href="<cvssandbox>tor/doc/tor-doc-server.html">Server zu
    betreiben</a>, damit das Netzwerk weiter wächst.</li>
  <li>Schaue dir den <a href="<page gui/index>">GUI-Wettbewerb</a> an und bringe
    deine Ideen zur Verbesserung der Benutzbarkeit der
    Torschnittstelle ein. Du erhälst ein kostenloses T-Shirt für jeden
    Beitrag!</li>
  <li>Erzähl es deinen Freunden! Bringe sie dazu, auch Server zu
    betreiben.  Bringe sie dazu, auch versteckte Services zu
    betreiben. Bringe sie dazu, es wieder ihren Freunden zu
    erzählen.</li>
  <li>Wir suchen nach Sponsoren und Geldgebern. Wenn du die Ziele von Tor magst
    und es nützlich findest, <a href="<page donate>">nimm dir einen Moment Zeit
    und spende, um die weitere Entwicklung zu unterstützen</a>. Wenn du Firmen,
    <abbr title="Non-Governmental Organisations">NGO</abbr>s oder andere
    Organisationen, die Sicherheit in ihrer Kommunikation benötigen, kennst,
    lasse sie über uns wissen.</li>
  </ol>

<a id="Bugs"></a>
<h2><a class="anchor" href="#Bugs">Bugs</a></h2>

<ol>
  <li>Tor server laufen im Moment auf Windows XP nicht
    stabil, weil wir versuchen, hunderte von Sockets
    zu verwenden, und der Windows-Betriebssystemkern anscheinend
    nicht in der Lage ist, damit umzugehen.
    <a href="http://wiki.noreply.org/noreply/TheOnionRouter/WindowsBufferProblems">Bitte
    hilf uns, das Problem zu lösen!</a>  Es ist im Moment das größte Problem,
    welches das Wachsen des Tor Netzwerkes verhindert.</li>
</ol>

<!--
<a id="Installers"></a>
<h2><a class="anchor" href="#Installers">Installationsprogramme</a></h2>

<ol>
  <li>Matt Edman hat ein <a href="http://freehaven.net/~edmanm/torcp/download.html">
    NSIS-basiertes Installationsprogramm</a> geschrieben,
    welches auch Privoxy und TorCP enthält.  Kannst du helfen, es stabiler und
    funktionaler zu machen?
  <li>Entwickle einen Weg für die Deinstallation auf OS X, der mehr
    automatisiert ist, als den Leuten
    mitzuteilen, <a
    href="<cvssandbox>tor/doc/tor-doc-osx.html#uninstall">alle
    Dateien zu entfernen</a>.</li>
  <li>Unser <a
    href="<cvssandbox>tor/tor.spec.in">RPM-Spec</a>
    benötigt einen Maintainer. Wenn du damit Kenntnisse hast, bitte
    hilf uns aus.</li>
  </ol>
-->

<a id="Usability"></a>
<h2><a class="anchor" href="#Usability">Benutzbarkeit und Schnittstellen</a></h2>

<ol>
  <li>Die Firefox-Erweiterung <a
  	 href="http://tor.eff.org/cvs/tor/doc/tor-switchproxy.html">SwitchProxy</a>
  ist komplexer als nötig. Es hat irritierende Optionen wie
  "anonymous" Proxies (anonyme Proxies), die nicht wirklich anonym
  sind. Noch dazu muss der Nutzer manche Sachen wie
  <var>localhost</var> oder <var>8118</var> selbst eingeben. Sollten
  wir unser eigenes Plugin anbieten, dass sinnvolle Standards für Tor
  voreingestellt hat? Weiterhin kam mir zu Ohren, dass SwitchProxy
  nicht mit Firefox 1.5 kompatibel ist. Sind hier vielleicht andere
  Erweiterungen wie ProxyButton über die Versionen mehr flexibel?</li>
  <li>Wir brauchen einen Weg, um DNS-Abfragen abzufangen, damit diese
    nicht nach außen dringen, während wir versuchen, anonym zu
    bleiben. (Dies passiert, weil die Anwendung selbst DNS-Anfragen
    stellt, anstatt diese über Tor zu leiten.) Eine Option wäre, die
    eingebaute Unterstützung für DNS-Abfragen zu nutzen. Aber man muss
    über die neue Sockserweiterung anfragen und keine Anweundung macht
    das bis jetzt. Eine bessere Option ist, die Controllerschnittstelle
    von Tor zu nutzen. Eine Anwendung verbindet sich zu Tor, übergibt
    ihm die DNS-Abfrage und Tor antwortet mit einer
    Dummy-IP-Adresse. Danach macht die Anwendung eine Verbindung zu
    dieser Dummyadresse und Tor bildet die Anfrage dann zur
    Originaladresse ab.</li>
  <li>Leute, die einen Server betreiben, teilen uns immer wieder mit,
    dass sie BandwidthRate in Teilen des Tages setzen wollen und eine
    andere BandwidthRate an anderen Teilen des Tages. Anstatt das
    direkt in Tor zu implementieren, sollten wir lieber ein kleines
    Skript haben, das über die <a href="<page gui/index>">Torschnittstelle</a>
    spricht und ein setconf macht, um die Änderungen
    herbeizuführen. Natürlich würde es durch Cron ausgeführt oder es
    schläft eine bestimmte Zeit und macht dann die Änderungen. Kann
    das jemand für uns schreiben und wir packen das dann
    nach <a href="<cvssandbox>tor/contrib/">tor/contrib</a>?</li>
  <li>Wir haben eine Vielzahl von Wegen, um
    das <a
    href="http://wiki.noreply.org/noreply/TheOnionRouter/TorFAQ#ChooseEntryExit">Tornetzwerk
    in einem bestimmten Land zu verlassen</a>. Aber all diese Wege
    brauchen den Namen eines spezillen Torservers. Es wäre schön,
    wenn man nur ein Land angeben muss und automatisch wird ein
    Server ausgewählt. Dazu braucht es allerdings eine Komponente,
    die weiss, wo sich der Server
    befindet. Das <a
    href="http://serifos.eecs.harvard.edu/cgi-bin/exit.pl">Skript
    bei Serifos</a> bearbeitet die Whois-Einträge
    manuell. Funktionieren hier auch Geolocationeinträge?</li>
  <li>Wenn wir gerade bei Geolocation sind, wäre es schön, wenn
    jemand eine Karte anfertigt, die die Standorte der Torserver
    anzeigt. Bonuspunkte gibt es, wenn es sich bei Änderungen am
    Netzwerk auf den neuesten Stand bringt.</li>
  <li>Tor bietet anonyme Verbindungen. Wenn du jedoch verschiedene
    Pseudonyme haben möchtest (z.B. rufst du desöfteren zwei Webseiten
    auf und wenn das jemand weiß, kann er auf dich schliessen.),
    unterstützen wir das nicht sehr gut.  Wir sollten einen guten
    Ansatz und eine Schnittstelle zur Handhabung von pseudonymen
    Profilen finden. Schaue dir
    den <a
    href="http://archives.seul.org/or/talk/Dec-2004/msg00086.html">Beitrag
    </a> und den <a
    href="http://archives.seul.org/or/talk/Jan-2005/msg00007.html">Followup</a>
    für mehr Details an.</li>
</ol>

<a id="Documentation"></a>
<h2><a class="anchor" href="#Documentation">Dokumentation</a></h2>

<ol>
  <li>Mithilfe bei der Betreuung der Webseite: Code, Inhalte, CSS und
    generelles Layout. Der erste Schritt hierzu ist, im IRC
    herumzuhängen, bis wir dich genauer kennen.</li>
  <li>Wir haben zuviel Dokumentation. Es ist zu weit an diversen
    Plätzen verteilt. Bitte sende uns Patches, Kommentare oder anderes,
    was dich verwirrt. Wir werden versuchen, das anzupassen.</li>
  <li>Hilf die Webseite und die Dokumentation in andere Sprachen zu
    übersetzen. Wenn du gern helfen möchtest, schaue dir die <a
    href="<page translation>">Richtlinien zur Übersetzung</a>
    an. Wir brauchen auch Leute, die helfen, die aktuelle
    italienische, französiche und schwedische Versione zu betreuen -
    siehe die <a href="<page translation-status>">Übersichtsseite
    zum Übersetzungsstatus</a>.</li>
  <li>Nachforschungen zu Privoxy vs. Freecap vs. Sockscap für
    Windowsclients. Gibt es Benutzbarkeits- oder Stabilitätsprobleme,
    die wir suchen und finden können bzw. die Leute darüber
    informieren können?</li>
  <li>Kann jemand Matt Edman mit der Dokumentation und HOWTOs für
    seinen <a href="http://freehaven.net/~edmanm/torcp/">Torcontroller
      für Windows</a> helfen?</li>
  <li>Kommentiere und dokumentiere unsere <a
    href="http://wiki.noreply.org/wiki/TheOnionRouter/TorifyHOWTO">Liste
    von Programmen, die durch Tor geroutet werden können</a>. </li>
  <li>Wir brauchen bessere Dokumentation für Programme, die dynamisch
    in Verbindungen eingreifen und diese durch Tor schicken. Für Linux
    und Windows scheinen tsocks (Linux), dsocks (BSD), und freecap gute Kandidaten.</li>
  <li>Wir haben eine riesige
    Liste <a href="<page support>">potentiell nützlicher Programme,
    die eine Schnittstelle zu Tor haben</a>. Welche sind in welchen
    Situationen gut? Bitte hilf uns, diese zu testen und dokumentiere
    die Eregbnisse.</li>
  </ol>

<a id="Coding"></a>
<h2><a class="anchor" href="#Coding">Programmierung und Design</a></h2>

<ol>
  <li>Wir brauchen eine bessere Option für einen Webproxy als nur
    Privoxy. Das Programm wird nicht mehr und betreut und hat eine
    Menge Fehler, gerade unter Windows. Wenn wir gerade dabei sind,
    welche sensiblen Informationen sind bei Privoxy nicht sicher? Gibt
    es andere Proxies, die hier besser sind?</li>
  <li>tsocks scheint derzeit ohne Maintainer zu sein. Wir haben einige
    Patches hingeschickt und keine Antwort erhalten. Könnte jemand einen
    neuen Entwicklungszweig starten? Wir bieten Hilfe.</li>
  <li>Derzeit werden die Deskriptoren für versteckte Services auf
    einigen wenigen Verzeichnisservern gespeichert. Das ist schlecht
    für die Privatsphäre und schlecht für die Robustheit. Für mehr
    Robustheit müssen wir die Deskriptoren weniger privat machen,
    weil wir diese an vielen Plätzen spiegeln sollten. Idealerweise
    möchten wir das Speicher-Nachschlagesystem komplett von den
    Verzeichnisservern trennen. Jedes verlässliche verteilte
    Speichersystem sollte diese Aufgabe erfüllen, solange es
    authentifizierte Updfates erlaubt. Soweit wir wissen, erlaubt
    kein implementierter DHT-Code authentifizierte Updates. Was wäre
    der richtige nächste Schritt?</li>
  <li>Die Exitknoten von Tor müssen sehr viele DNS-Abfragen parallel
    erledigen. Aber <code>gethostbyname()</code> ist schlecht
    designt, denn es blockiert bis die Anfrage beendet ist. Daher
    benötigt es einen eigenen Thread oder Prozess und Tor muss sehr
    viele DNS-"Arbeiter"-Threads hervorbringen. Es gibt einige
    asynchrone DNS-Bibliotheken da draußen. Aber aus historischen
    Gründen sind diese voller fehler. Gibt es welche, die stabil,
    schnell, sauber und Frei Software sind? (Tor nutzt OpenSSL und das
    ist wahrscheinlich nicht mit der GPL kompatibel. Somit sind
    GPL-Bibliotheken außen vor.)
    Falls ja, könnten wir diese in Tor integrieren. Schaue dir <a
    href="http://archives.seul.org/or/talk/Sep-2005/msg00001.html">Agls
    Posting</a> für einen potentiellen Ansatz an. Wirf weiterhin
    einen Blick
    auf <a href="http://daniel.haxx.se/projects/c-ares/">c-ares</a>
    und <a
    href="http://www.monkey.org/~provos/libdnsres/">libdnsres</a>.</li>
  <li>Torversionen ab 0.1.1.x unterstützen Cryptohardwarebeschleuniger
    via OpenSSL. Bisher hat das niemand getestet. Möchte jemand gern
    eine Karte haben und schauen, ob das funktioniert?</li>
  <li>Weil die Torserver jede Zelle speichern und weitergeben müssen,
    brauchen die Torserver mit hoher Bandbreite Dutzende Megabyte an
    Speicher. Wir benötigen bessere Heuristiken, wenn die Buffer zu
    verkleinern/vergrößern sind. Wahrscheinlich sollte dies nach dem
    Bufferdesign des Linuxkernels modelliert werden. Dort gibt es
    kleinere Buffer, die sich gegenseitig verbinden.</li>
  <li>Wie funktionieren die ulimits auf Win32? Wir haben speziell bei
    älteren Versionen Probleme, dass die Leute keine Dateideskriptoren,
    Verbindung zum Buffer, etc. mehr haben. (Wir sollten WSAENOBUFS
    nutzen, wie es gebraucht wird, einen Blick auf den
    Registryeinträge MaxConnections, MaxUserPort und TcpTimedWaitDelay
    werfen. Weiterhin sollten wir einen Weg bieten, diese Einstellung
    nach Wunsch zu treffen. Schaue dir
    auch <a
    href="http://bugs.noreply.org/flyspray/index.php?do=details&amp;id=98">Bug
    98</a> an.)</li>
  <li>Patches für autoconf-Skripte von Tor. Zuerst würden wir gern
    unser <var>autoconfigure.in</var> dazu bringen, Crosskomilierung
    zu handhaben. So dass wir beispielsweise Tor auf obskuren
    Plattformen, wie dem Linksys WRTG54 bauen können. Zweitens mögen
    wir die Option <var>with-ssl-dir</var>, um die suche nach
    SSL-Bibliotheken zu deaktivieren.</li>
  <li>Reverse DNS implementieren (schon spezifiziert)</li>
  <li>Eine Sicherheitsanalyse mit
    "<a href="http://en.wikipedia.org/wiki/Fuzz_testing">Fuzz</a>"
    machen.  Herausfinden, ob es da draußen gute Bibliotheken dafür
    gibt. Gewinne Ruhm und Ehre, wenn wir nur wegen dir ein neues
    Release herausbringen!</li>
  <li>Wie schwer ist es, BIND oder einen DNS-Proxy zu patchen, um die
    Anfragen über unsere <a
    href="http://wiki.noreply.org/noreply/TheOnionRouter/TorFAQ#CompatibleApplications">tor-resolve-Erweiterung</a>
    umzuleiten? Was wäre, wenn die UDP-Anfragen in TCP-Anfragen
    geändert werden und dann durch Tor geschickt werden?</li>
  <li>Tor nutzt TCP für den Transport und TLS für die Verschlüsselung
    der Verbindungen. Dies ist einfach. Es bedeutet aber auch, dass
    alle Zellen Verspätungen erfahren, wenn nur ein Paket verworfen
    wird. Daher können wir nur bedingt TCP-Streams unterstützen. Es
    gibt eine <a
    href="http://wiki.noreply.org/noreply/TheOnionRouter/TorFAQ#TransportIPnotTCP">Liste
    von Gründen</a>, warum wir nicht zu Transport per UDP gewechselt
    sind. Es wäre schön, wenn diese Liste kürzer werden würde.</li>
  <li>Wir sind nicht weit davon entfernt, Unterstützung für IPv6 bei
    Exitknoten zu haben. Falls du dich stark um IPv6 kümmerst, ist
    das wahrscheinlich der Platz, um zu starten.</li>
</ol>

<a id="Research"></a>
<h2><a class="anchor" href="#Research">Forschung</a></h2>

<ol>
  <li>Die Fingerprintattacken gegen Webseiten machen eine Liste von
    einigen wenigen populären Webseiten, laden die Inhalte herunter
    und machen einen Satz von Signaturen für jede Seite. Danach
    observieren sie den Verkehr des Torclients. Während sie
    beobachten, wie der Client die Daten empfängt, gelangen sie
    schnell zu einer Vermutung, welche Seite gerade besucht wird. Wie
    effektiv ist dieser Angriff bezüglich der aktuellen Codebasis von
    Tor? Beginne danach Verteidigungsmöglichkeiten auszuloten. Wir
    könnten beispielsweise die Zellgröße von 512 Bytes auf 1024 Bytes
    anheben und Techniken wie <a
    href="http://freehaven.net/anonbib/#timing-fc2004">defensives
    Verwerfen</a> anwenden. Wir könnten auch künstliche Verspätungen
    einarbeiten. Welchen Einfluss haben diese Massnahmen und wie groß
    ist der Einfluss auf die Benutzbarkeit?</li>
  <li>Eine weitere Angriffsmöglichkeit (end-to-end traffic
    confirmation attack) basiert darauf, dass der verkehr zwischen
    Alice und Bob beobachtet wird. Durch den <a
    href="http://freehaven.net/anonbib/#danezis:pet2004">Vergleich
    der Signaturen des Netzverkehrs kann man herausfinden, on man
    denselben Stream verfolgt</a>. Bis jetzt akzeptiert Tor dies als
    Fakt und nimmt an, dass dies in allen Fällen trivial ist. Ist das
    wahr? Wieviel Verkehr von welcher Sorte braucht man, um sicher zu
    sicher, dass es funktioniert? Gibt es Szenarien, die die Attacke
    ausbremsen? Funktioniert Padding besser als anderes?</li>
  <li>Die Attacke auf die Routingzonen ist der Netzpfad zwischen
    Alice und dem Eingangsknoten (bzw. zwischen dem Exitknoten und
    Bob). In der Literatur wird dies als einfache Verbindung auf
    einem Graph dargestellt. In der Praxis durchquert der Pfad viele
    autonome Systeme. Es ist nicht ungewöhnlich, dass dasselbe
    <a href="http://freehaven.net/anonbib/#feamster:wpes2004">autonome
    System sowohl beim Eingangs- wie auch beim Ausgangspfad
    erscheint</a>. Um nun herauszufinden, ob ein spezielles Alice-,
    Eingangs-, Ausgangs-, Bobviereck gefährlich ist, müssten wir die
    gesamte Routingzone des internet herunterladen und Operationen
    darauf ausführen. Gibt es praktische Abschätzungen, die die
    Arbeit erleichtern können?</li>
  <li>Tor funktioniert nicht sehr gut, wenn Server eine asymmetrische
    Bandbreite (Kabel oder DSL) haben. Tor hat separate
    TCP-Verbindungen zwischen jedem Hop. Wenn nun die einkommenden
    Pakete gut ankommen und die ausgehenden alle verworfen werden,
    übertragen die die TCP-Pushback-Mechanismen diese Informationen
    nicht gut hin zu den eingehenden Verbindungen. Eventuell sollte
    Tor feststellen, wenn eine Menge an ausgehenden Verbindungen
    verworfen werden und dann die eigehenden Verbindungen selbst
    herunterregeln? Ich könnte mir ein Schema vorstellen, wo wir ein
    konservatives Ratelimit suchen und das langsam vergrößern, bis
    Pakete verworfen werden. Wir brauchen jemanden, der sich gut mit
    Netzwerken auskennt, um dies zu simulieren und eine Lösung zu
    finden. Wir müssen die Erosion in der Performance verstehen und
    das als Motivation für Transport per UDP verstehen.</li>
  <li>Ein verwandtes Thema ist die Kontrolle bei Netzüberlastung. Ist
    unser Design ausreichend, um hohe Netzlast auszuhalten?
    Vielleicht sollten wir mit Fenstern von variabler Größe
    experimentieren? Das schien im <a
    href="http://www.psc.edu/networking/projects/hpn-ssh/theory.php">Experiment
    mit dem SSH-Durchsatz</a> gut zu funktionieren. Wir müssen das
    messen und verbessern und bei guten Resultaten Tor überholen.</li>
  <li>Damit Dissidenden in fernen Ländern Tor nutzen können, ohne von
    der Firewall des Landes geblockt zu werden, brauchen wir einen
    Weg, um zehntausende von Relays zu bekommen anstatt nur einigen
    hundert. Wir können uns eine GUI vorstellen, die einen "Hilf
    China"-Button hat. Dieser öffnet einen Port und verteilt ein paar
    Kilobyte Traffic ins Tornetzwerk. Wie verteilen wir eine Liste
    dieser Freiwilligen in einer automatischen Art und Weise? Dies
    muss so passieren, dass die Firewalls auf Landesebene diese nicht
    erkennen. Wahrscheinlich muss das auf einem Niveau persönlichen
    Vertrauens funktionieren.  Siehe unseren <a
    href="http://wiki.noreply.org/noreply/TheOnionRouter/TorFAQ#China"
    >Eintrag in der FAQ</a> und lies dann <a
    href="http://freehaven.net/anonbib/topic.html#Communications_20Censorship"
    >die Zunsurwiderstandssektion der AnonBib</a>.
    </li>
  <li>Tor-Verbindungen werden schrittweise aufgebaut, ein Knoten nach
    dem anderen.  Also haben wir theoretisch die Möglichkeit, manche
    Ströme schon nach dem zweiten Knoten die Tor-Wolke verlassen zu
    lassen, andere nach dem dritten Knoten, und so weiter.  Dies erscheint
    nett, weil es die Menge der austretenden Ströme, welcher ein bestimmter
    Server sieht, begrenzt.  Wenn wir diesen Strom jedoch sicher haben wollen,
    dann, laut unserer aktuellen Logik,  sollte der kürzeste Pfad mindestens 3
    Knoten lang sein.  Das heisst, die anderen Ströme wären noch länger.  Wir
    müssen diese Performance/Sicherheitsabwägung untersuchen.</li>
   <li>Es ist nicht schwer, DoS Angriffe auf Tor-Server oder
    Tor-Verzeischnisserver erfolgreich durchzuführen.  Sind Client-Puzzles die
    richtige Anwort?  Welche anderen praktischen Herangehensweisen gibt es?
    Bonuspunkte, wenn diese mit dem aktuellen Tor-Protokoll abwärtskompatibel
    sind.</li>
  </ol>

<p><a href="<page contact>">Lass uns wissen</a>, wenn du bei einem
  dieser Punkte Fortschritte gemacht hast.</p>

</div><!-- #main -->

#include <foot.wmi>
