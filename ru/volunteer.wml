## translation metadata
# Based-On-Revision: 9231
# Last-Translator: ygrekheretix/gmail

#include "head.wmi" TITLE="Добровольцы" CHARSET="KOI8-R"

<div class="main-column">

<!-- PUT CONTENT AFTER THIS TAG -->
<h2>Три вещи которые можно сделать прямо сейчас:</h2>
<ol>
<li> Пожалуйста задумайтесь над возможностью 
<a href="<cvssandbox>tor/doc/tor-doc-server.html">запустить сервер</a>,
чтобы увеличить сеть Tor.</li>
<li> Расскажите друзьям! Пусть они тоже запустят сервер Tor. Пусть 
запустят скрытый сервис. Пусть они расскажут своим друзьям!</li>
<li> Мы ищем финансирование и спонсоров. Если вам по душе цели Tor,
пожалуйста <a href="<page donate>">
помогите проекту деньгами, чтобы поддержать дальнейшую разработку</a>.
И если вы знаете какие-либо компании, негосударственные организации,
или другие организации, которым нужна безопасная связь в Сети, расскажите им о нас.</li>
</ol>

<a id="Bugs"></a>
<h2><a class="anchor" href="#Bugs">Критические баги</a></h2>
<ol>
<li>В настоящий момент серверы Tor под Windows XP
работают нестабильно, так как мы пытаемся использовать сотни
сокетов, а ядро Windows похоже не в состоянии с этим справится.
<a href="http://wiki.noreply.org/noreply/TheOnionRouter/WindowsBufferProblems">
Пожалуйста помогите нам решить эту проблему!</a> Наверное лучшим решением будет
научить libevent под Windows использовать overlapped IO вместо select(), а потом 
адаптировать Tor к новому интерфейсу libevent.
</ol>

<a id="Usability"></a>
<h2><a class="anchor" href="#Usability">Поддержка приложений</a></h2>
<ol>
<li>Нам нужен хороший способ перехвата DNS запросов, чтобы они не давали
дополнительной информации локальному наблюдателю когда мы пытаемся оставаться
анонимными. (Это происходит потому что приложения самостоятельно посылают
DNS запросы перед обращением к SOCKS прокси.)</li>
<ul>
<li>Нужно 
<a href="http://wiki.noreply.org/noreply/TheOnionRouter/TSocksPatches">применить
все наши патчи к tsocks</a> и форкнуться. Мы предоставим хостинг для 
этого проекта если требуется.</li>
<li>Мы должны пропатчить программу "dsocks" (автор Dug Song), чтобы использовать
Tor'овскую команду <i>mapaddress</i> из интерфейса контроллера, таким образом мы
не будем терять время в Tor на DNS разрешение перед соединением.</li>
<li>Мы должны исправить наш скрипт <i>torify</i> так, чтобы он определял 
установленный tsocks или dsocks и правильно вызывал их. Пожалуй для этого
потребуется унифицировать их интерфейсы, и может быть использовать общий код,
или вообще отбросить поддержку одного из них.</li>
</ul>
<li>Операторы серверов хотят иметь возможность указывать разные значения BandwidthRate
в зависимости от времени дня. Вместо того, чтобы кодить это внутрь самого Tor, лучше
написать скрипт который будет использовать <a href="<page gui/index>">
Интерфейс Tor Controller</a>, и посылать setconf для изменения ограничений трафика.
Возможно он будет запускаться cron'ом, или может самостоятельно засыпать и просыпаться 
(выполняя действия по настройке) в определённое время. Может-ли кто-нибудь
написать такое за нас и мы положим этот скрипт в <a href="<svnsandbox>contrib/">contrib/</a>?
Это будет неплохая заявка на <a href="<page gui/index>">Tor GUI соревнование</a>.
<!-- We have a good script to adjust stuff now, right? -NM -->
</li>
<li>Tor может <a
href="http://wiki.noreply.org/noreply/TheOnionRouter/TorFAQ#ChooseEntryExit">
выходить из сети Tor через указанный узел</a>, но у нас должна быть возможность 
указать только страну и остальное должно работать автоматически. Лучший способ это
добыть директорию Blossom, запустить локально клиент Blossom, который безопасно 
(через Tor и проверяя подписи) получает эту директорию,  перехватывает имена вида
<tt>.country.blossom</tt>, и делает как раз то что нужно.</li>
<li>Касательно геолокации, кто-то должен нарисовать карту Земли с отмеченными
серверами Tor. Лучше если эта карта будет обновляться со временем. К сожалению,
простой способ сделать это - посылать все данные к Google чтобы они нарисовали карту 
за нас. Как это скажется на безопасности, и нет ли у нас других вариантов?</li>
</ol>

<a id="Documentation"></a>
<h2><a class="anchor" href="#Documentation">Документация</a></h2>
<ol>
<li>Мы часто слышим что пользователи Tor могут стать жертвами атак против 
анонимности, если не отключат JavaScript, Java, ActiveX, Flash, итд. Существуют 
ли какие-нибудь плагины (как например NoScript для Firefox), которые помогут 
пользователям управлять этим риском. Какие точно риски с этой стороны?</li>
<li>Существует ли набор плагинов который может полностью заменить Privoxy для 
Firefox 1.5+? Мы слышали что Tor работает намного быстрее, если не использовать 
Privoxy при этом.</li>
<li>Пожалуйста помогите Matt Edman с документацией и примерами к его контроллеру
Tor, <a href="http://vidalia-project.net/">Vidalia</a>.</li>
<li>Проверьте
<a href="http://wiki.noreply.org/wiki/TheOnionRouter/TorifyHOWTO">список
программ</a> которые можно использовать через Tor.</li>
<li>Нам нужно больше документации по динамическому перехвату
соединений и перенаправлению их в Tor. Кандидаты - tsocks (Linux), dsocks (BSD),
и freecap (Windows), т.к. будут лучше использовать нашу новую фичу TransPort.</li>
<li>У нас есть большой список
<a href="http://wiki.noreply.org/noreply/TheOnionRouter/SupportPrograms">
программ которые могут быть полезны в качестве интерфейса к Tor</a>. 
Какие из них в каких конкретно ситуациях могут пригодиться? Пожалуйста помогите их
проверить и задокументировать результаты.</li>
<li>Помогите перевести веб-страницы и документацию на другие языки.
Смотрите <a href="<page translation>">инструкции для переводчиков</a> 
если вы хотите помочь. Нам также нужны люди, чтобы поддерживать в актуальном 
состоянии итальянский, французский и шведский переводы - смотрите
<a href="<page translation-status>">страницу состояния переводов</a>.</li>
</ol>

<a id="Coding"></a>
<h2><a class="anchor" href="#Coding">Кодирование и проектирование</a></h2>
<ol>
<li>Сейчас дескрипторы скрытых сервисов хранятся только на нескольких
серверах директорий. Это плохо для приватности и надёжности. Чтобы увеличить 
надёжность мы должны сделать дескрипторы скрытых сервисов менее скрытыми, 
так как мы собираемся зеркалировать их во многих местах. В идеале надо бы 
полностью разделить систему хранения/поиска от директорий серверов Tor. Первая
проблема в том, что надо разработать новый формат хранения дескрипторов скрытых
сервисов, который будет а) символьным вместо бинарного; б) хранить
список introduction узлов зашифрованным, для всех кто не знает <tt>.onion</tt>
адрес, так что сервер директории не может узнать дескриптор; в) позволить директориям
проверять отметку времени и подпись дескриптора скрытых сервисов, чтобы
нельзя было подсунуть ложный дескриптор. Во-вторых, подойдёт любая 
надёжная распределённая система хранения, разрешающая аутентифицированные
обновления, но насколько мы знаем, ни одна из реализаций DHT не поддерживает
такие обновления.</li>
<li>Tor 0.1.1.x включает поддержку аппаратных ускорителей криптографических операций 
с помощью OpenSSL. Впрочем, никто никогда это не проверял. Если у вас есть такая 
возможность, проверьте Tor на своей карточке и сообщите нам результаты.</li>
<li>Так как Tor сохраняет в памяти каждую ячейку (cell) для обработки,
высоко-скоростные сервера потребляют много памяти, просто для сохранения всех
этих буферов. Нам нужно улучшить эвристический алгоритм, который определяет
когда сжимать/расширять буферы. Может быть стоит использовать концепцию из ядра
Linux, где много маленьких буферов ссылаются на друг друга, вместо того
чтобы использовать монолитные буферы?</li>
<li>Выполнить анализ безопасности Tor с помощью
<a href="http://en.wikipedia.org/wiki/Fuzz_testing">"fuzz"</a>. Определить,
существуют ли подходящие библиотеки.</li>
<li>Tor использует TCP на транспортном уровне и TLS для шифрования
соединений. Это просто и красиво, но это значит что все ячейки (cell)
задерживаются, если один пакет потеряется, и это значит что мы можем
поддерживать только TCP потоки. У нас есть 
<a href="http://wiki.noreply.org/noreply/TheOnionRouter/TorFAQ#TransportIPnotTCP">
список причин по которым мы не используем UDP транспорт</a>, но хотелось
бы сократить этот список. У нас также есть предлагаемая 
<a href="<svnsandbox>doc/tor-spec-udp.txt">спецификация для Tor и UDP</a>
 &mdash; пожалуйста сообщите если с ней что не так.</li>
<li>Мы уже близки к поддержке IPv6 для адресов назначения (на выходящих
узлах). Если вас интересует IPv6, пожалуй стоит начать с этого пункта.</li>
</ol>

<a id="Research"></a>
<h2><a class="anchor" href="#Research">Исследования</a></h2>
<ol>
<li>"Атака по сигнатуре сайта": создать список нескольких сотен 
популярных сайтов, скачать их страницы, и сохранить набор "сигнатур"
этих страниц. Наблюдая трафик клиента Tor, по входящим данным,
путём сопоставления сигнатур можно попытаться отгадать с каким из
этих сайтов сейчас установлено соединение. Во-первых, насколько эффективна
эта атака против Tor? После ответа на этот вопрос, начните проверять защиту:
например можно увеличить размер ячейки с 512 до 1024 байт, можно реализовать
техники дополнения (padding), такие как 
<a href="http://freehaven.net/anonbib/#timing-fc2004">defensive dropping</a>,
или можно ввести задержки трафика. Как это повлияет на атаку, и как это скажется
на юзабилити?
<li>Атака по "корреляции оконечного трафика": наблюдая трафик Алисы и Боба,
мы можем <a href="http://freehaven.net/anonbib/#danezis:pet2004">сравнить
сигнатуры трафика и убедиться что мы наблюдаем один поток</a>.
На данном этапе Tor принимает этот факт как данность и считается, что
атака тривиально реализуется в любом случае. Во-первых, правдиво ли это
допущение. Сколько трафика с каким распределением надо наблюдать чтобы
атакующая сторона могла быть уверена в результате? Есть ли способы
замедлить атаку (может быть уменьшить кол-во передаваемой информации)?
Может быть некоторые схемы дополнения или изменения профиля трафика
при такой атаке работают лучше чем другие?</li>
<li>Атака "по зоне маршрута": в большинстве литературы предполагается что
путь от Алисы к входному узла (и от выходного узла к Бобу) это одно ребро
на некотором графе. На практике-же, путь проходит через несколько "автономных
систем" (AS), и
<a href="http://freehaven.net/anonbib/#feamster:wpes2004">
не факт что одна и та же AS не будет включать и входящий и выходящий путь</a>.
К несчастью, чтобы определить безопасность каждой конкретной четвёрки (Алиса, 
входящий узел, выходящий, и Боб), мы должны загрузить полную маршрутную таблицу 
Интернета и выполнить на ней ресурсоёмкие операции. Существуют ли какие-нибудь 
практические приближения, например избегание IP адреса в той же /8 сети?</li>
<li>Tor doesn't work very well when servers have asymmetric bandwidth
(e.g. cable or DSL). Because Tor has separate TCP connections between
each hop, if the incoming bytes are arriving just fine and the outgoing
bytes are all getting dropped on the floor, the TCP push-back mechanisms
don't really transmit this information back to the incoming streams.
Perhaps Tor should detect when it's dropping a lot of outgoing packets,
and rate-limit incoming streams to regulate this itself? I can imagine
a build-up and drop-off scheme where we pick a conservative rate-limit,
slowly increase it until we get lost packets, back off, repeat. We
need somebody who's good with networks to simulate this and help design
solutions; and/or we need to understand the extent of the performance
degradation, and use this as motivation to reconsider UDP transport.</li>
<li>A related topic is congestion control. Is our
current design sufficient once we have heavy use? Maybe
we should experiment with variable-sized windows rather
than fixed-size windows? That seemed to go well in an <a
href="http://www.psc.edu/networking/projects/hpn-ssh/theory.php">ssh
throughput experiment</a>. We'll need to measure and tweak, and maybe
overhaul if the results are good.</li>
<li>To let dissidents in remote countries use Tor without being blocked
at their country's firewall, we need a way to get tens of thousands of
relays, not just a few hundred. We can imagine a Tor client GUI that
has a "help China" button at the top that opens a port and relays a
few KB/s of traffic into the Tor network. (A few KB/s shouldn't be too
much hassle, and there are few abuse issues since they're not being exit
nodes.) But how do we distribute a list of these volunteer clients to the
good dissidents in an automated way that doesn't let the country-level
firewalls intercept and enumerate them? Probably needs to work on a
human-trust level. See our <a
href="http://wiki.noreply.org/noreply/TheOnionRouter/TorFAQ#China">FAQ
entry</a> on this, and then read the <a
href="http://freehaven.net/anonbib/topic.html#Communications_20Censorship">censorship
resistance section of anonbib</a>.</li>
<li>Tor circuits are built one hop at a time, so in theory we have the
ability to make some streams exit from the second hop, some from the
third, and so on. This seems nice because it breaks up the set of exiting
streams that a given server can see. But if we want each stream to be safe,
the "shortest" path should be at least 3 hops long by our current logic, so
the rest will be even longer. We need to examine this performance / security
tradeoff.</li>
<li>Сейчас довольно просто заDoSить сервера Tor или сервера каталогов. 
Правильный ответ - игра в загадки с клиентом? Какие ещё практические 
подходы вы можете предложить? Желательно чтобы они были совместимы с существующим 
протоколом.</li>
</ol>

<a href="<page contact>">Сообщите нам</a> если вы на пути к решению!

  </div><!-- #main -->

#include <foot.wmi>
