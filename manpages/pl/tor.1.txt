// Copyright (c) The Tor Project, Inc.
// Przeczytaj LICENSE, by poznać informacje o licencji
// To jest plik asciidoc wykorzystywany do generowania odnośników manpage/html.
// Naucz się asciidoc na http://www.methods.co.nz/asciidoc/userguide.html
TOR(1)
==============

NAZWA
----
tor - router cebulowy drugiej generacji


SYNOPSIS
--------
**tor** [__OPTION__ __value__]...

OPIS
-----------
__tor__ jest zorientowaną połączeniowo usługą komunikacji
anonimizującej. Użytkownicy wybierają trasę przez zestaw węzłów i negocjują
"wirtualny obwód" przez się, w której każdy węzeł zna swojego następnika i
poprzednika, ale żadnych innych. Ruch płynący przez obwód jest rozpakowywany
na każdym węźłe, korzystając z symetrycznego klucza, co pozwala poznać
kolejny węzeł. +

__tor__ dostarcza rozproszoną sieć serwerów ("routerów
cebulowych"). Uzytkownicy przepuszczają swoje strumienie TCP -- ruch www,
ftp, ssh, etc -- przez routery, zaś odbiorcy, obserwatorzy, a nawet same
routery mają kłopot ze znalezieniem źródła strumienia.

OPCJE
-------
**-h**, **-help**::
Wyświetla krótką pomoc i wyłącza aplikację.

**-f** __PLIK__::
    PLIK zawiera dalsze pary "opcja wartość". (Domyślnie: @CONFDIR@/torrc)

**--hash-password**::
    Generuje hashowane hasło do dostępu do portu kontrolnego.

**--list-fingerprint**::
    Generuje Twoje klucze i wyświetla Twoją nazwę i odcisk palca klucza.

**--verify-config**::
Weryfikuje czy konfiguracja nie zawiera błędów.

**--nt-service**::
    **--service [install|remove|start|stop]** Zarządzaj usługą Tora na Windows
    NT/2000/XP. Bieżące instrukcje można znaleźć na
    https://wiki.torproject.org/noreply/TheOnionRouter/TorFAQ#WinNTService

**--list-torrc-options**::
    Wyświetl wszystkie opcje.

**--version**::
Wyświetla wersję Tor i zakańcza pracę.

**--quiet**::
    Nie uruchamiaj Tora z logowaniem na konsolę, chyba że jawnie to wymuszono.
    (Domyślnie Tor wyświetla wiadomości na poziomie "notice" lub wyższym na
    konsolę, do momentu, w którym przejrzy konfigurację.)

Other options can be specified either on the command-line (--option
    value), or in the configuration file (option value or option "value").
    Options are case-insensitive. C-style escaped characters are allowed inside
    quoted values.   Options on the command line take precedence over
    options found in the configuration file, except indicated otherwise.  To
    split one configuration entry into multiple lines, use a single \ before
    the end of the line.  Comments can be used in such multiline entries, but
    they must start at the beginning of a line.

**BandwidthRate** __N__ **bytes**|**KB**|**MB**|**GB**::
    A token bucket limits the average incoming bandwidth usage on this node to
    the specified number of bytes per second, and the average outgoing
    bandwidth usage to that same value.  If you want to run a relay in the
    public network, this needs to be _at the very least_ 20 KB (that is,
    20480 bytes). (Default: 5 MB)

**BandwidthBurst** __N__ **bytes**|**KB**|**MB**|**GB**::
    Ogranicza maksymalny rozmiar zestawu tokenów (znany jako salwa) do podanej
    liczby bajtów w każdym kierunku. (Domyślnie: 10 MB)

**MaxAdvertisedBandwidth** __N__ **bytes**|**KB**|**MB**|**GB**::
    Jeśli ustawione, nie podamy więcej niż ta przepustowość jako nasze
    BandwidthRate. Operatorzy serwerów chcący zmniejszyć liczbę klientów
    chcących przez nich budować obwody (jako że jest to proporcjonalne do
    zgłaszanej przepustowości) mogą więc zmniejszyć zapotrzebowanie na CPU na ich serwerze
    bez wpływu na wydajność sieci.

**RelayBandwidthRate** __N__ **bytes**|**KB**|**MB**|**GB**::
    If not 0, a separate token bucket limits the average incoming bandwidth
    usage for \_relayed traffic_ on this node to the specified number of bytes
    per second, and the average outgoing bandwidth usage to that same value.
    Relayed traffic currently is calculated to include answers to directory
    requests, but that may change in future versions. (Default: 0)

**RelayBandwidthBurst** __N__ **bytes**|**KB**|**MB**|**GB**::
    If not 0, limit the maximum token bucket size (also known as the burst) for
    \_relayed traffic_ to the given number of bytes in each direction.
    (Default: 0)

**PerConnBWRate** __N__ **bajtów**|**KB**|**MB**|**GB**::
    Jeśli ustawione, włącz osobne ograniczanie przepustowości dla każdego połączenia z nie-przekaźników.
    Nie powinno być potrzeby zmiany tej wartości, gdyż wartość dla całej sieci jest
    publikowana w dokumencie konsensusu, a Twój przekaxnik będzie używał tamtej wartości. (Domyślnie: 0)

**PerConnBWBurst** __N__ **bajtów**|**KB**|**MB**|**GB**::
    Jeśli ustawione, włącz osobne ograniczanie przepustowości dla każdego połączenia z nie-przekaźników.
    Nie powinno być potrzeby zmiany tej wartości, gdyż wartość dla całej sieci jest
    publikowana w dokumencie konsensusu, a Twój przekaxnik będzie używał tamtej wartości. (Domyślnie: 0)

**ConnLimit** __NUM__::
    The minimum number of file descriptors that must be available to the Tor
    process before it will start. Tor will ask the OS for as many file
    descriptors as the OS will allow (you can find this by "ulimit -H -n").
    If this number is less than ConnLimit, then Tor will refuse to start. +
 +
    You probably don't need to adjust this. It has no effect on Windows
    since that platform lacks getrlimit(). (Default: 1000)

**ConstrainedSockets** **0**|**1**::
    Jeśli ustawione, Tor powie systemowi, by spróbował zmniejszyć bufory wszystkich
    gniazd do rozmiaru podanego w **ConstrainedSockSize**. Jest to przydatne dla
    serwerów wirtualnych i innych środowisk, w których bufory TCP poziomu systemu mogą
    zostać ograniczone. Jeśli jesteś na wirtualnym serwerze i napotkasz błąd "Error
    creating network socket: No buffer space available", prawodpodobnie
    doświadczasz tego problemu. +
 +
    Preferowanym rozwiązaniem jest, aby administrator zwiększył bufory dla
    całego hosta poprzez /proc/sys/net/ipv4/tcp_mem lub równoważny mechanizm;
    ta opcja jest drugim rozwiązaniem. +
 +
    Opcja DirPort nie powinna być używana, gdy bufory TCP są małe. ZAchowane
    żądania do serwerów katologowych pobierają dodatkowe gniazda, co pogarsza
    problem. +
 +
    **Nie** powinno się włączać tej opcji, jeśli nie napotkało się na błąd "no buffer
    space available". Zmniejszanie buforów TCP ma wpływ na rozmiar okna w
    strumieniu TCP i zmniejszy przepustowość proporcjonalnie do czasów przejścia
    przez sieć na długich ścieżkach. (Domyślnie: 0.)

**ConstrainedSockSize** __N__ **bajtów**|**KB**::
    Gdy **ConstrainedSockets** jest włączone, bufory nadawcze i odbiorcze wszystkich
    gniazd zostaną ustawione na ten limit. Musi to być wartość między 2048 a
    262144, w skokach co 1024 bajty. Domyślna wartość 8192 jest zalecana.

**ControlPort** __Port__::
    Jeśli ustawione, Tor będzie przyjmował połączenia na ten port i pozwoli tym
    połączeniom kontrolować proces Tora z wykorzystaniem Protokołu Kontroli Tora
    (opisanego w control-spec.txt). Uwaga: to pozwoli każdemu procesowi na hoście
    lokalnym kotrolować Tora, chyba że ustawisz też jedną z opcji
    **HashedControlPassword** lub **CookieAuthentication**. Ta
    opcja jest wymagana przez wiele kontrolerów Tora; większość używa wartości 9051.

**ControlListenAddress** __IP__[:__PORT__]::
    Przypisz proces nasłuchujący kontrolera do tego adresu. Jeśli podasz port, przypisze
    do tego portu zamiast tego podanego w ControlPort. Zalecamy trzymanie
    się z dala od tej opcji, chyba że wiesz co robisz,
    gdyż dawanie napastnikom dostępu do procesu nasłuchującego kontrolera jest naprawdę
    niebezpieczne. (Domyślnie: 127.0.0.1) Ta derektywa może być podana wiele
    razy, by przypisać proces do wielu adresów/portów.

**ControlSocket** __Ścieżka__::
    Jak ControlPort, ale nasłuchuje na gnieździe domeny Unix zamiast na gnieździe
    TCP. (Tylko Unix i systemy Uniksopodobne.)

**HashedControlPassword** __haszowane_hasło__::
    Nie zezwalaj na żadne połączenia na porcie kontrolnym za wyjątkiem gdy
    drugi proces zna hasło, którego skrótem jest __haszowane_hasło__. Możesz
    obliczyć skrót hasła, uruchamiając "tor --hash-password
    __hasło__". Możesz podać wiele przyjmowanych haseł, używając więcej
    niż jednej linii HashedControlPassword.

**CookieAuthentication** **0**|**1**::
    Jeśli ta opcja jest ustawiona na 1, nie zezwalaj na żadne połączenia na porcie kontrolnym
    za wyjątkiem gdy proces łączący się zna zawartość pliku o nazwie
    "control_auth_cookie", który Tor stworzy w swoim katalogu danych. Ta
    metoda uwierzytelniania powinna być używana tylko na systemach z dobrą ochroną
    systemu plików. (Domyślnie: 0)

**CookieAuthFile** __Ścieżka__::
    Jeśli ustawione, zastępuje domyślną lokalizację i nazwę pliku
    z ciasteczkiem Tora. (Zobacz CookieAuthentication wyżej.)

**CookieAuthFileGroupReadable** **0**|**1**|__Nazwagrupy__::
    Jeśli ta opcja ma wartość 0, nie pozwól grupie w systemie plików na odczyt
    pliku z ciasteczkiem. Jeśli ta opcja ma wartość 1, spraw, by plik z ciasteczkiem był odczytywalny
    przez domyślny GID. [Zrobienie pliku odczytywalnym przez inne grupy nie jest jeszcze
    zaimplementowane; daj nam znać, jesli potrzebujesz tego z jakiegoś powodu.] (Domyślnie: 0).

**DataDirectory** __KATALOG__::
    Zapisz dane do pracy w katalogu KATALOG (Domyślnie: @LOCALSTATEDIR@/lib/tor)

**DirServer** [__nazwa__] [**flagi**] __adres__:__port__ __OdciskPalca__::
    Używaj niestandardowego serwera katlogowego pod podanym adresem
    i portem, z podanym odciskiem pacla klucza. Ta opcja może być powtarzana
    wiele razy, dla wielu serwerów katalogowych. Flagi są
    rozdzielane spacjami i określają, jakim rodzajem serwera jest ten
    serwer. Domyślne, każdy serwer jest autorytatywny dla bieżących katalogów stylu "v2",
    chyba że podano opcję "no-v2". Jeśli podano flagę "v1", Tor
    będzie używał tego serwera też do katalogów starego stylu (v1).
    (Tylko serwery lustrzane katalogów patrzą na to.) Tor będzie
    używał tego serwera jako serwera autorytatywnego dla informacji o usługach ukrytych, jeśli podano flagę "hs",
    lub gdy flaga "v1" jest ustawiona, a flaga "no-hs" **nie** jest ustawiona.
    Tor używał tego serwera jako serwera autorytatywnego mostków, jeśli
    podano flagę "bridge". Jeśli podano flagę "orport=**port**", Tor będzie używał
    podanego portu do otwierania zaszyfrowanych tuneli do tego serwera. Gdy podano flagę
    "v3ident=**fp**", ten serwer jest serwerem katalogowym v3, którego
    długoterminowy klucz podspisujący v3 ma odcisk palca **fp**. +
 +
    Jeśli nie podano żadnych linii **dirserver**, Tor będzie używał domyślnych serwerów
    katalogowych. UWAGA: ta opcja jest do uruchamiania prywatnych sieci Tora
    z własnymi centrami katalogowymi. Jeśli jej użyjesz, będzie można Cię odróżnić
    od innych użytkowników, gdyż nie będziesz mieć zaufania do tych samych
    serwerów, co oni.

**AlternateDirAuthority** [__nazwa__] [**flagi**] __adres__:__port__ __OdciskPalca__ +

**AlternateHSAuthority** [__nazwa__] [**flagi**] __adres__:__port__ __OdciskPalca__ +

**AlternateBridgeAuthority** [__nazwa__] [**flagi**] __adres__:__port__ __ Odciskalca__::
    Jak DirServer, ale zastępuje mniej z domyślnych serwerów katalogowych. Używanie
    AlternateDirAuthority zastępuje domyślne serwery katalogwe Tora, ale
    zostawia serwery katalogowe usług ukrytych i mostków nienaruszone.
    Podobnie, używanie AlternateHSAuthority zastępuje domyślne serwery usług
    ukrytych, ale nie serwery katalogowe lub mostków.

**DisableAllSwap** **0**|**1**::
    Jeśli ustawione na 1, Tor spróbuje zablokować wszystkie bieżące i przyszłe strony,
    pamięci, by nie można ich było umieścić w przestrzeni wymiany. Windows, OS X i Solaris są obecnie
    nieobsługiwane. Naszym zdaniem to działa na współczesnych dystrybucjach Gnu/Linux,
    i powinno działać na systemach *BSD (niesprawdzone). Ta
    opcja wymaga uruchomienia Tora z konta roota i powinno się ustawić opcję
    **User**, by prawidłowo ograniczyć uprawnienia Tora. (Domyślnie: 0)

**FetchDirInfoEarly** **0**|**1**::
    Jeśli ustawione na 1, Tor zawsze pobierze informacje katalogowe,
    nawet jeśli nie są spełnione normalne kryteria wczesnego
    pobierania. Normalni użytkownicy powinni zostawić to wyłączone. (Domyślnie: 0)

**FetchDirInfoExtraEarly** **0**|**1**::
    Jeśli ustawione na 1, Tor pobierze informacje katalogowe przed innymi pamięciami
    katalogowymi. Spróbuje pobrać informacje katalogowe bliżej początku
    okresu konsensusu. Normalni użytkownicy powinni zostawić to wyłączone.
    (Domyślnie: 0)

**FetchHidServDescriptors** **0**|**1**::
    Jeśli ustawione na 0, Tor nigdy nie pobierze żadnych deskryptorów usług ukrytych z
    katalogów punktów spotkań. Ta opcja jest przydatna tylko wtedy, gdy używasz kontrolera Tora,
    który za Ciebie zajmuje się pobieraniem usług ukrytych. (Domyślnie: 1)

**FetchServerDescriptors** **0**|**1**::
    Jeśli ustawione na 0, Tor nigdy nie pobierze żadnych podsumować stanu sieci czy deskryptorów
    serwerów z serwerów katalogowych.  Ta opcja jest przydatna tylko wtedy, gdy
    używasz kontrolera Tora, który za Ciebie zajmuje się pobieraniem katalogów.
    (Domyślnie: 1)

**FetchUselessDescriptors** **0**|**1**::
    Jeśli ustawione na 1, Tor pobierze każdy nieprzesarzały deskryptor z
    serwerów, o którym się dowie. W innym przypadku, będzie unikać pobierania bezużytecznych
    deskryptorów, na przykład z routerów, które nie są uruchomione. Ta opcja jest
    przydatna, jeśli używasz skryptu "exitlist" do wyliczenia węzłów Tora,
    z których można wyjść na określony adres. (Domyślnie: 0)

**HTTPProxy** __host__[:__port__]::
    Tor wyśle wszystkie żądania do katalogów przez ten host:port (lub host:80,
    gdy nie podano portu), zamiast łączyć się bezpośrednio z serwerami
    katalogowymi.

**HTTPProxyAuthenticator** __nazwa:hasło__::
    Jeśli określone, Tor będzie używał tej nazwy użytkownika i hasła do uwierzytelniania
    Basic HTTP w proxy, jak podano w RFC 2617. Obecnie jest to jedyna metoda uwierzytelniania proxy HTTP
    obsługiwana przez Tora; możesz wysłać łatę, jeśli chcesz mieć obsługę
    innych metod.

**HTTPSProxy** __host__[:__port__]::
    Tor będzie wykonywał wszystkie swoje połączenia OR (SSL) przez ten host:port (lub
    host:443, gdy nie podano portu), poprzez HTTP CONNECT zamiast łączyć się
    bezpośrednio do serwerów. Możesz ustawić **FascistFirewall**, by ograniczyć
    zbiór portów, do których możesz próbować się połączyć, jeśli Twój serwer proxy HTTPS
    pozwala na połączenia tylko do pewnych portów.

**HTTPSProxyAuthenticator** __nazwa:hasło__::
    Jeśli podane, Tor będzie używał tej nazwy użytkownika i hasła do uwierzytelniania
    Basic HTTP w proxy, jak podano w RFC 2617. Obecnie jest to jedyna metoda uwierzytelniania proxy HTTPS
    obsługiwana przez Tora; możesz wysłać łatę, jeśli chcesz mieć obsługę
    innych metod.

**Socks4Proxy** __host__[:__port__]::
    Tor będzie wykonywał wszystkie połączenia OR przez proxy SOCKS 4 pod adresem host:port
    (lub host:1080, gdy nie podano portu).

**Socks5Proxy** __host__[:__port__]::
    Tor będzie wykonywał wszystkie połączenia OR przez proxy SOCKS 5 pod adresem host:port
    (lub host:1080, gdy nie podano portu).

**Socks5ProxyUsername** __nazwa__ +

**Socks5ProxyPassword** __hasło__::
   Jeśli podano, uwierzytelniaj się na serwerze proxy SOCKS 5 podając nazwę i hasło
    według RFC 1929. Nazwa i hasło muszą mieć od 1 do
    255 znaków.

**KeepalivePeriod** __NUM__::
    By uniemożliwić firewallom rozłączanie przestarzałych połączeń, wyślij komórkę
    utrzymywania poąłczenia co NUM sekund na wykorzystywanych otwartych poąłczeniach. Jeśli połączenie
    nie ma otwartych obwodów, zostanie zamiast tego zamknięte po NUM sekundach
    nieaktywności. (Domyślnie: 5 minutes)

**Log** __minPoziom__[-__maxPoziom__] **stderr**|**stdout**|**syslog**::
    Wyślij wszystkie wiadomości między __minPoziom__ a __maxPoziom__ na standardowe
    wyjście, standardowe wyjście bęłdów, lub do dziennika systemowego. (Wartość
    "syslog" jest obsługiwana tylko na systemach Unix.) Rozpoznawane poziomy powagi to
    debug, info, notice, warn i err. Zalecamy używanie "notice" w większości przypadków,
    gdyż cokolwiek więcej może dać wrażliwe informacje
    napastnikowi, który uzyska logi. Jesli podano tylko jeden stopień powagi, wszystkie
    wiadomości tego poziomu lub wyższego zostaną wysłane do podanego miejsca.

**Log** __minPoziom__[-__maxPoziom__] **file** __NAZWAPLIKU__::
    Jak wyżej, ale wyślij wiadomości logu do podanego pliku. Opcja
    "Log" może pojawić się więcej niż raz w pliku konfiguracyjnym.
    Wiadomości są wysyłane do wszystkich logów, do których pasuje ich
    poziom powagi.

**Log** **[**__domain__,...**]**__minSeverity__[-__maxSeverity__] ... **file** __FILENAME__ +

**Log** **[**__domain__,...**]**__minSeverity__[-__maxSeverity__] ... **stderr**|**stdout**|**syslog** ::
    As above, but select messages by range of log severity __and__ by a
    set of "logging domains".  Each logging domain corresponds to an area of
    functionality inside Tor.  You can specify any number of severity ranges
    for a single log statement, each of them prefixed by a comma-separated
    list of logging domains.  You can prefix a domain with $$~$$ to indicate
    negation, and use * to indicate "all domains".  If you specify a severity
    range without a list of domains, it matches all domains. +
 +
    This is an advanced feature which is most useful for debugging one or two
    of Tor's subsystems at a time. +
 +
    The currently recognized domains are: general, crypto, net, config, fs,
    protocol, mm, http, app, control, circ, rend, bug, dir, dirserv, or, edge,
    acct, hist, and handshake.  Domain names are case-insensitive. +
 +
    For example, "`Log [handshake]debug [~net,~mm]info notice stdout`" sends
    to stdout: all handshake messages of any severity, all info-and-higher
    messages from domains other than networking and memory management, and all
    messages of severity notice or higher.

**LogMessageDomains** **0**|**1**::
    If 1, Tor includes message domains with each log message.  Every log
    message currently has at least one domain; most currently have exactly
    one.  This doesn't affect controller log messages. (Default: 0)

**OutboundBindAddress** __IP__::
    Spraw, by wszystkie wychodzące połączenia wychodziły z podanego adresu IP. To
    jest przydatne tylko gdy masz wiele interfejsów sieciowych, a chcesz, by wszystkie
    połączenia wychodzące Tora używaly jednego. Ta opcja będzie ignorowana dla
    połączeń na adresy zwrotne (127.0.0.0/8 i ::1).

**PidFile** __PLIK__::
    Przy starcie zapisz nasz PID do pliku PLIK. Przy bezproblemowym wyjściu
    usuń PLIK.

**ProtocolWarnings** **0**|**1**::
    Gdy 1, Tor będzie logował z powagą \'warn' różne przypadki, gdy inne strony nie
    trzymają się specyfikacji Tora. W innym przypadku, są one logowane z powagą
    \'info'. (Domyślnie: 0)

**RunAsDaemon** **0**|**1**::
    Gdy 1, Tor tworzy nowy proces i demonizuje się w tło. Ta opcja nic nie robi
    na Windows; zamiast tego, trzeba użyć opcji --service.
    (Domyślnie: 0)

**LogTimeGranularity** __NUM__::
    Set the resolution of timestamps in Tor's logs to NUM milliseconds.
    NUM must be positive and either a divisor or a multiple of 1 second.
    Note that this option only controls the granularity written by Tor to
    a file or console log.  Tor does not (for example) "batch up" log
    messages to affect times logged by a controller, times attached to
    syslog messages, or the mtime fields on log files.  (Default: 1 second)

**SafeLogging** **0**|**1**|**relay**::
    Tor może wymazywać potencjalnie wrażliwe łańcuchy znaków z logów (np.
    adresy), zastępując je napisem [scrubbed]. Tym sposobem logi dalej mogą
    być użyteczne, ale nie zostaja w nich informacje identyfikujące osobę
    o tym, jakie strony użytkownik mógł odwiedzić. +
 +
    Gdy ta opcja jest ustawiona na 0, Tor nie będzie nic wymazywał, gdy wynosi
    1, wszystkie potencjalnie wrażliwe napisy są zastępowane. Gdy jest ustawiona na
    relay, wszystkie wiadomości logowania wygeneroweane podczas działania jakoprzekaźnik są czyszczone, ale
    wszystkie wiadomości wygenerowane w czasie działania jako klient nie są. (Default: 1)

**User** __UID__::
    W czasie startu przełącz się na tego użytkownika i jego główną grupę.

**HardwareAccel** **0**|**1**::
    Gdy nie 0, spróbuj użyć wbudowanego (statycznego) sprzętowego przyspieszania kryptografii,
    gdy dostępne. (Domyślnie: 0)

**AccelName** __NAZWA__::
    W czasie używania sprzętowego przyspieszania kryptografii OpenSSL spróbuj załadować dynamiczny
    silnik o tej nazwie. To musi być używane do jakiegokolwiek dynamicznego sprzętowego silnika.
    Nazwy mogą zostać zweryfikowane komendą openssl engine.

**AccelDir** __DIR__::
    Podaj tę ocję, gdy używasz dynamicznego sprzętowego przyspieszania, a biblioteka
    implementująca silnik jest gdzieś poza domyślną lokalizacją OpenSSL.

**AvoidDiskWrites** **0**|**1**::
    Gdy nie 0, spróbuj zapisywać na dysk rzadziej niż w innych przypadkach.
    Jest to przydatne w czasie działania z pamięci flash lub innych nośników, które obsługują
    tlyko ograniczoną liczbę zapisów. (Domyślnie: 0)

**TunnelDirConns** **0**|**1**::
    Gdy nie 0, będziemy budować jednoelementowy obwód i wykonamy szyfrowane połączenie
    przez port ORPort serwera katalogowego, z którym się łączymy, jeśli on to obsługuje.
    (Domyślnie: 1)

**PreferTunneledDirConns** **0**|**1**::
    Gdy nie 0, będziemy unikać serwerów katalogowych, które nie obsługują tunelowanych
    połączeń katalogowych, jesli możilwe. (Domyślnie: 1)

**CircuitPriorityHalflife** __NUM1__::
    Gdy ta wartość jest ustawiona, zmieniamy domyślny algorytm wyboru, którą
    komórkę obwodu wysłać lub przekazać jako następną. Gdy wartość to 0,
    chodzimy w kółko między aktywnymi obwodami w połączeniu, dostarczając jedną
    komórkę z każdego po kolei. Gdy wartość jest dodatnia, preferujemy dostarczasnie
    komórek z połaczenia o najniższej ważonej liczbie komórek, gdzie
    komórki są ważone wykładniczo według dostarczonej wartości 
    CircuitPriorityHalflife (w sekundach). JEśli ta opcja nie jest w ogóle
    ustawiona, używamy zachowania zalecanego w bieżącym konsensusie
    stanu sieci (networkstatus). To jest zaawansowana opcja; nie powinno być potrzeby
    jej zmiany. (Domyślnie: nie ustawiona.)

**DisableIOCP** **0**|**1**::
    If Tor was built to use the Libevent's "bufferevents" networking code
    and you're running on Windows, setting this option to 1 will tell Libevent
    not to use the Windows IOCP networking API.  (Default: 1)

OPCJE KLIENTA
--------------

Następujace opcje są przydatne tylko dla klientów (to znaczy, gdy
**SocksPort** nie jest zerem):

**AllowInvalidNodes** **entry**|**exit**|**middle**|**introduction**|**rendezvous**|**...**::
    Jeśli niektóre serwery Tora wyraźnie działają źle, serwery
    katalogowe mogą ręcznie oznaczyć je jako nieprawidłowe, co znaczy, że nie
    zaleca się ich używania w miejscu wejścia lub wyjścia w Twoich obwodach. Możesz
    jednak włączyć ich używanie w niektórych punktach obwodu. Domyślne to
    "middle,rendezvous", a inne możliwości nie są zalecane.

**ExcludeSingleHopRelays** **0**|**1**::
    This option controls whether circuits built by Tor will include relays with
    the AllowSingleHopExits flag set to true. If ExcludeSingleHopRelays is set
    to 0, these relays will be included. Note that these relays might be at
    higher risk of being seized or observed, so they are not normally
    included.  Also note that relatively few clients turn off this option,
    so using these relays might make your client stand out.
    (Default: 1)

**Bridge** __IP__:__ORPort__ [OdciskPalca]::
    Gdy właczone razem z UseBridges, instruuje Tora, by używał przekaźnika
    pod adresem "IP:ORPort" jako "mostka" przekazującego do sieci Tora. Jeśli podano "OdciskPalca"
    (w tym samym formacie, co w DirServer), sprawdzimy, czy przekaźnik
    podany pod tym adresem ma właściwy odcisk palca. Używamy też tego
    odcisku palca do znalezienia deskryptora mostku na serwerze mostków, jeśli
    jest podany i UpdateBridgesFromAuthority też jest ustawione.

**LearnCircuitBuildTimeout** **0**|**1**::
    If 0, CircuitBuildTimeout adaptive learning is disabled. (Default: 1)

**CircuitBuildTimeout** __NUM__::

    Try for at most NUM seconds when building circuits. If the circuit isn't
    open in that time, give up on it. If LearnCircuitBuildTimeout is 1, this
    value serves as the initial value to use before a timeout is learned. If
    LearnCircuitBuildTimeout is 0, this value is the only value used.
    (Default: 60 seconds.)

**CircuitIdleTimeout** __NUM__::
    Jeśli trzymaliśmy czysty (nieużywany) obwód przez NUM sekund, to
    zamykamy go. Dzięki temu, gdy klient Tora jest całkowicie bezczynny, może przedawnić wszystkie
    swoje obwody, po czym może przedawnić połączenia TLS. Poza tym, jeśli zrobimy obwód,
    który nie jest przydatny do wychodzenia dla żadnych otrzymywanych żądań, nie
    będzie ciągle zapychał miejsca na liście obwodów. (Domyślnie: 1
    godzina.)

**CircuitStreamTimeout** __NUM__::
    Jeśli nie jest zerem, ta opcja zmienia wewnętrzne mechanizmy przedawnienia co do tego,
    ile sekund czekamy, zanim odłaczymy strumień od obwodu i spróbujemy nowego obwodu.
    Jeśli Twoja się jest szczególnie wolna, możesz ustawić to na wartość
    taką jak 60. (Domyślnie: 0)

**ClientOnly** **0**|**1**::
    Jeśli ustawione na 1, Tor w żadnym przypadku nie będzie działał jako serwer lub
    obsługiwał żądania katalogowe. Domyślne jest działanie jako klient, chyba że ORPort jest
    skonfigurowany. Zazwyczaj nie musisz tego ustawiać; Tor jest całkiem mądry w
    domyslaniu się, czy jesteś wystarczająco wiarygodny i masz dość przepustowości łącza, aby być
    przydatnym serwerem.) (Domyślnie: 0)

**ExcludeNodes** __węzeł__,__węzeł__,__...__::
    Lista odcisków palców, nazw, kodów państw i wzorców adresowych węzłów,
    których nigdy nie używać do budowania obwodów. (Przykład:
    ExcludeNodes SlowServer, $    EFFFFFFFFFFFFFFF, \{cc}, 255.254.0.0/8)

**ExcludeExitNodes** __węzeł__,__węzeł__,__...__::
    Lista odcisków palców, nazw, kodów państw i wzorców adresowych węzłów,
    których nigdy nie używać w czasie wybierania węzła wyjściowego. Węzły
    podane w ExcludeNodes są automatycznie brane jako część tej
    listy.

**EntryNodes** __węzeł__,__węzeł__,__...__::
    Lista odcisków palców, nazw, kodów państw i wzorców adresowych węzłów,
    których należy używać w czasie wybierania pierwszego węzła w normalnych
    obwodach. Te węzły są traktowane tylko jako preferencja, chyba że
    StrictNodes (patrz niżej) też jest ustawione.

**ExitNodes** __węzeł__,__węzeł__,__...__::
    Lista odcisków palców, nazw, kodów państw i wzorców adresowych węzłów,
    których należy używać w czasie wybierania ostatniego węzła w normalnych
    obwodach wychodzących. Te węzły są traktowane tylko jako preferencja, chyba że
    StrictNodes (patrz niżej) też jest ustawione.

**StrictNodes** **0**|**1**::
    Gdy 1 i opcja konfiguracji EntryNodes jest ustawiona, Tor nigdy nie będzie
    używał innych węzłów niż podane w EntryNodes jako pierwszego węzła normalnego obwodu.
    Gdy 1 i opcja konfiguracji ExitNodes jest ustawiona, Tor nigdy nie będzie
    używał innych węzłów niż podane w EntryNodes jako pierwszego węzła normalnego obwodu wychodzącego.
    Tor może dalej używać tych węzłów do obwodów niewychodzących,jak 
    jednokrokowe pobieranie z katalogów czy obwody obsługujące usługi ukryte.

**FascistFirewall** **0**|**1**::
    Gdy 1, Tor będzie tworzył połaczenia wychodzące tlyko do ORs działających na portach,
    na które pozwala Twój firewall (domyślnie to 80 i 443; zobacz **FirewallPorts**).
    To pozwoli Ci uruchamiać Tora jako klienta za firewallem z
    restrykcyjną polityką, ale nie pozwoli Ci prowadzić serwera za takim
    firewallem. Jeśli wolisz lepszą kontrolę, użyj
    ReachableAddresses zamiast tej opcji.

**FirewallPorts** __PORTY__::
    Lista portów, na połączenia do których pozwala Twój firewall. Używane tylko gdy
    **FascistFirewall** jest ustawione. Ta opcja jest przestarzała; używaj ReachableAddresses
    zamiast niej. (Domyślnie: 80, 443)

**HidServAuth** __onion-adres__ __ciasteczko__ [__nazwa-usługi__]::
    Uwierzytelnianie klienta dla usługi ukrytej. Prawidłowe adresy onion zawierają 16
    znaków spośród a-z2-7 plus ".onion", prawidłowe ciasteczka uwierzytelniające zawierają 22
    znaki spośród A-Za-z0-9+/. Nazwa usługi jest uzywana tylko do celów
    wewnętrznych, np. dla kontrolerów Tora. Ta opcja może być użyta wiele razy
    dla różnych usług ukrytych. Jeśli usługa ukryta używa uwierzytelniania a
    ta opcja nie jest ustawiona, ta usługa jest niedostępna. Usługi
    ukryte można skonfigurować, by wymagały uwierzytelniania za pomocą opcji     **HiddenServiceAuthorizeClient**.

**ReachableAddresses** __ADRES__[/__MASKA__][:__PORT__]...::
    Rozdzielona przecinkami lista adresów IP i portów, na połączenia do których zezwala
    Twój firewall. Format jest jak dla adresów w ExitPolicy poza tym,że
    rozumiane jest "accept", chyba że jawnie podano "reject". Na
    przykład, \'ReachableAddresses 99.0.0.0/8, reject 18.0.0.0/8:80, accept
    \*:80' oznacza, że Twój firewall pozwala na połączenia do wszystkiego w sieci
    99, odrzuca połaczenia na port 80 do sieci 18, i pozwala na połączenia na port
    80 w innych przypadkach. (Domyślnie: \'accept \*:*'.)

**ReachableDirAddresses** __ADRES__[/__MASKA__][:__PORT__]...::
    Jak **ReachableAddresses**, lista adresów i portów. Tor będzie posłuszny
    tym ograniczeniom podczas pobierania informacji katalogowych, wykorzystując standardowe żądania HTTP
    GET. Jeśli nie podano jawnie, używana jest wartość
    **ReachableAddresses**. Jeśli ustawiono **HTTPProxy**, to te połączenia
    będą szły przez tamto proxy.

**ReachableORAddresses** __ADRES__[/__MASKA__][:__PORT__]...::
    Jak **ReachableAddresses**, lista adresów i portów. Tor będzie posłuszny
    tym ograniczeniom w czasie łączenia się z Onion Routers, używając TLS/SSL. Jeśli nie
    ustawione, używana jest wartość **ReachableAddresses**. Jeśli
    **HTTPSProxy** jest ustawione, te połączenia będą szły przez to proxy. +
 +
    Rozdzielenie **ReachableORAddresses** i
    **ReachableDirAddresses** jest interesujące tylko gdy łączysz się przez
    serwery proxy (patrz **HTTPProxy** i **HTTPSProxy**). Większość serweró proxy ogranicza
    połączenia TLS (których używa Tor do łączenia się z Onion Routers) na port 443,
    a niektóre ograniczają żądania HTTP GET (których Tor używa do pobierania informacji
    katalogowych) na port 80.

**LongLivedPorts** __PORTS__::
    Lista portów dla usług, które mają długotrwałe połączenia
    (np. rozmowy czy powłoki interaktywne). Obwody dla strumieni używających tych
    portów będą zawierały tylko węzły o długim czasie działania, by zmniejszyć szanse, że węzeł
    wyłączy się zanim strumień się zakończy. (Domyślnie: 21, 22, 706, 1863,
    5050, 5190, 5222, 5223, 6667, 6697, 8300)

**MapAddress** __adres__ __nowyadres__::
    Gdy do Tora przychodzi żądanie dla danego adresu, przepisze je na nowyadres
    zanim je przetworzy. Na przykład, jeśli chcesz, by połączenia do
    www.indymedia.org wychodziły przez __torserwer__ (gdzie __torserwer__ jest nazwą
    serwera), użyj "MapAddress www.indymedia.org
    www.indymedia.org.torserver.exit".

**NewCircuitPeriod** __NUM__::
    Co NUM sekund rozpatrz, czy nie budować nowego obwodu. (Domyślnie: 30
    sekund)

**MaxCircuitDirtiness** __NUM__::
    Można ponownie używać obwodu, który został po raz pierwszy użyty co najwyżej NUM sekund temu,
    ale nigdy nie podłączaj nowego strumienia do obwodu, który jest za stary. (Domyślnie: 10
    minut)

**NodeFamily** __node__,__node__,__...__::
    The Tor servers, defined by their identity fingerprints or nicknames,
    constitute a "family" of similar or co-administered servers, so never use
    any two of them in the same circuit. Defining a NodeFamily is only needed
    when a server doesn't list the family itself (with MyFamily). This option
    can be used multiple times.  In addition to nodes, you can also list
    IP address and ranges and country codes in {curly braces}.

**EnforceDistinctSubnets** **0**|**1**::
    Gdy 1, Tor nie umieści dwóch serwerów, których adresy IP są "za blisko siebie" w
    tym samym obwodzie. Obecnie, dwa adresy są "za blisko siebie", gdy są w
    tym samym zakresie /16. (Domyślnie: 1)

**SocksPort** __PORT__::
    Uruchom ten port do nasłuchiwania połączeń od aplikacji używających protokołu
    Socks. Ustaw na 0, jeśli nie chcesz pozwolić na połączenia od
    aplikacji. (Domyślnie: 9050)

**SocksListenAddress** __IP__[:__PORT__]::
    Przypisz się do tego adresu w celu nasłuchiwania połączeń od aplikacji używających protokołu
    Socks. (Domyślnie: 127.0.0.1) Możesz też podać port (np.
    192.168.0.1:9100). Ta dyrektywa może być podana wiele razy do przypisania się
    do wielu adresów/portów.

**SocksPolicy** __polityka__,__polityka__,__...__::
    Ustaw politykę wejściową dla tego serwera, by ograniczyć to, kto może połączyć się
    z portami SocksPort i DNSPort. Polityki mają tę samą formę, co polityki
    wyjścia poniżej.

**SocksTimeout** __NUM__::
    Pozwól połączeniu socks czekać NUM sekund przed wymianą danych, i NUM sekund
    niepodłączonym, czekając na odpowiedni obwód, zanim zamkniemy to połączenie. (Domyślnie:
    2 minuty.)

**TrackHostExits** __host__,__.domena__,__...__::
    Dla każdej wartości z rozdzielonej przecinkami listy, Tor będzie śledził
    ostatnie połączenia do hostów pasujących do tej wartości i będzie próbował ponownie użyć tego samego
    węzła wyjściowego dla każdej z nich. Jesli wartość zaczyna się od \'.\', jest traktowana jako
    pasująca do całej domeny. Jeśli jedną z wartosci jest po prostu \'.', oznacza to
    pasowanie do wszystkiego. Ta opcja jest przydatna, jeśli często łączysz się ze stronami,
    które przedawnią wszystkie Twoje ciasteczka uwierzytelniające (tzn. wylogują Cię), gdy
    zmieni się Twój adres IP. Ta opcja ma tę wadę, że ujawnia, 
    że określona historia jest związana z pojedynczym użytkownikiem.
    Ale większość ludzi, którzy chcieliby to obserwować, i tak będzie to obserwować poprzez
    ciasteczka lub inne środki specyficzne dla protokołu.

**TrackHostExitsExpire** __NUM__::
    Jako że serwery wyjściowe włączają się i wyłączają, pożądane jest, by
    powiązania między hostem i serwerem wyjściowym przedawniły się po NUM sekundach. Domyślnie jest to
    1800 sekund (30 minut).

**UpdateBridgesFromAuthority** **0**|**1**::
    Gdy ustawione (razem z UseBridges), Tor spróbuje pobrać deskryptory mostków
    ze skonfigurowanych serwerów mostków, gdy jet to wykonalne. Potem spróbuje żądania
    bezpośredniego, gdy serwer odpowie 404. (Domyślnie: 0)

**UseBridges** **0**|**1**::
    Gdy ustawione, Tor pobierze deskryptor każdego mostka podanego w liniach "Bridge",
    i będzie używał tych przekaźników zarówno jako strażników wejściowych, jak i
    strażników katalogowych. (Domyślnie: 0)

**UseEntryGuards** **0**|**1**::
    Gdy ta opcja jest ustawiona na 1, wybieramy kilka długoterminowych serwerów wejsciowychi próbujemy
    się ich trzymać. Jest to pożądane, gdyż ciągłe zmiany serwerów
    zwiększają szanse, że napastnik mający kilka serwerów będzie obserwował część
    Twoich ścieżek. (Domyślnie ma wartość 1.)

**NumEntryGuards** __NUM__::
    Jeśli UseEntryGuards jest ustawione na 1, spróbujemy wybrać łącznie NUM routerów
    jako długoterminowe punkty wejścia dla naszych obwodów. (Domyślnie ma wartość 3.)

**SafeSocks** **0**|**1**::
    Gdy ta opcja jest włączona, Tor będzie odrzucał połączenia aplikacji, które
    używają niebezpiecznych wersji protokołu socks -- takich, które dostarczają tylko adres IP,
    co znaczy, że aplikacja najpierw wykonuje rozwiązywanie DNS.
    Ściśle mówiąc, są to protokoły  socks4 i socks5, gdy nie robi się zdalnych operacji DNS.
    (Domyślnie ma wartość 0.)

**TestSocks** **0**|**1**::
    Gdy ta opcja jest włączona, Tor wykona wpis do logu o poziomie notice dla
    każdego połączenia na port Socks wskazując, czy żądanie używało bezpiecznego
    protokołu socks, czy niebezpiecznej (patrz wyżej na SafeSocks). To
    pomaga w określeniu, czy z aplikacji używającej Tora mogą wyciekać
    żądania DNS. (Domyślnie: 0)

**WarnUnsafeSocks** **0**|**1**::
    When this option is enabled, Tor will warn whenever a request is
    received that only contains an IP address instead of a hostname. Allowing
    applications to do DNS resolves themselves is usually a bad idea and
    can leak your location to attackers. (Default: 1)

**VirtualAddrNetwork** __Address__/__bits__::
    When Tor needs to assign a virtual (unused) address because of a MAPADDRESS
    command from the controller or the AutomapHostsOnResolve feature, Tor
    picks an unassigned address from this range. (Default:
    127.192.0.0/10) +
 +
    When providing proxy server service to a network of computers using a tool
    like dns-proxy-tor, change this address to "10.192.0.0/10" or
    "172.16.0.0/12". The default **VirtualAddrNetwork** address range on a
    properly configured machine will route to the loopback interface. For
    local use, no change to the default VirtualAddrNetwork setting is needed.

**AllowNonRFC953Hostnames** **0**|**1**::
    Gdy ta opcja jest wyłączona, Tor blokuje nazwy hostów zawierające nieprawidłowe
    znaki (jak @ i :) zamiast wysyłać je do węzła wyjściowego do rozwiązania.
    To pomaga w uchwyceniu przypadkowych prób rozwiązania adresów itd.
    (Domyślnie: 0)

**AllowDotExit** **0**|**1**::
    If enabled, we convert "www.google.com.foo.exit" addresses on the
    SocksPort/TransPort/NATDPort into "www.google.com" addresses that exit from
    the node "foo". Disabled by default since attacking websites and exit
    relays can use it to manipulate your path selection. (Default: 0)

**FastFirstHopPK** **0**|**1**::
    Gdy ta opcja jest wyłączona, Tor używa kroku klucza publicznego do pierwszego
    skoku w tworzeniu obwodów. Omijanie tego jest ogólnie bezpieczne, gdyż już
    użyliśmy TLS do uwierzytelnienia przekaźnika i do nawiązania kluczy bezpiecznych w forwardowaniu.
    Wyłączenie tej opcji spowalnia budowanie obwodów. +
 +
    Tor zawsze użyje kroku klucza publicznego do pierwszego skoku, gdy działa jako
    przekaźnik, a nigdy nie użyje kroku klucza publicznego, jeśli nie zna
    jeszcze klucza onion pierwszego skoku. (Domyślnie: 1)

**TransPort** __PORT__::
    Jeśli nie zero, włącza obsługę przezroczystego proxy na porcie __PORT__ (według umowy,
    9040). Wymaga obsługi przezroczystych proxy w systemie operacyjnym, jak pf w systemach BSD czy
    IPTables w Linuksie. Jeśli planuje się używać Tora jako przezroczyste proxy dla
    sieci, powinno się sprawdzić i zmienić VirtualAddrNetwork z ustawienia
    domyślnego. Powinno się też ustawić opcję TransListenAddress dla
    sieci, w której ruchu chcesz pośredniczyć. (Domyślnie: 0).

**TransListenAddress** __IP__[:__PORT__]::
    Przypisz się do tego adresu w celu nasłuchiwania na połączenia przezroczystego proxy. (Domyślnie:
    127.0.0.1). Jest to użyteczne do eksportowania przezroczystego serwera proxy dla
    całej sieci.

**NATDPort** __PORT__::
    Pozwól starym wersjom ipfw (dołaczonym w starych wersjach FreeBSD, etc.)
    na wysyłanie połączeń przez Tora, wykorzystując protokół NATD. Ta opcja jest
    tylko dla osób, które nie mogą używać TransPort.

**NATDListenAddress** __IP__[:__PORT__]::
    Przypisz się do tego adresu w celu nasłuchiwania na połączenia NATD. (Domyślnie: 127.0.0.1).

**AutomapHostsOnResolve** **0**|**1**::
    Gdy ta opcja jest włączona, a otrzymamy żądanie rozwiązania adresu
    kończącego się na jeden z przyrostków w **AutomapHostsSuffixes**, mapujemy nieużywany
    adres wirtualny na ten adres, po czym zwracamy nowy adres wirtualny. 
    To jest przydatne do sprawiania, by adresy ".onion" działały z aplikacjami, które
    rozwiązują adresy, a potem się do nich łączą. (Domyślnie: 0).

**AutomapHostsSuffixes** __PRZYROSTEK__,__PRZYROSTEK__,__...__::
    Rozdzielona przecinkami lista przyrostków do używania z **AutomapHostsOnResolve**.
    Przyrostek "." jest równoważny do "wszystkie adresy." (Domyślnie: .exit,.onion).

**DNSPort** __PORT__::
    Gdy nie zero, Tor nasłuchuje żądań DNS przez UDP na tym porcie i rozwiązuje je
    anonimowo. (Domyślnie: 0).

**DNSListenAddress** __IP__[:__PORT__]::
    Przypisz się do tego adresu w celu nasłuchiwania na połączenia DNS. (Domyślnie: 127.0.0.1).

**ClientDNSRejectInternalAddresses** **0**|**1**::
    Jeśli włączone, Tor nie wierzy żadnej otrzymanej anonimowo odpowiedzi DNS, która
    mówi, że adres rozwiązuje się na adres wewnętrzny (jak 127.0.0.1 czy
    192.168.0.1). Ta opcja zapobiega niektórym atakom opartym na przeglądarkach; nie
    wyłączaj jej, chyba że wiesz, co robisz. (Domyślnie: 1).

**ClientRejectInternalAddresses** **0**|**1**::
    If true, Tor does not try to fulfill requests to connect to an internal
    address (like 127.0.0.1 or 192.168.0.1) __unless a exit node is
    specifically requested__ (for example, via a .exit hostname, or a
    controller request).  (Default: 1).

**DownloadExtraInfo** **0**|**1**::
    Jeśli włączone, Tor pobiera i zachowuje dokumenty "extra-info". Te dokumenty
    zawierają informacje o serwerach inne niż informacje w ich normalnych
    deskryptorach routerów. Tor sam nie używa tych informacji do niczego;
    by zaoszczędzić przepustowość, zostaw tę opcję wyłączoną. (Domyślnie: 0).

**FallbackNetworkstatusFile** __NAZWAPLIKU__::
    Jeśli Tor nie ma zachowanego pliku networkstatus, zaczyna używać tego.
    Nawet jeśli jest on przestarzały, Tor dalej może z niego skorzystać do
    poznania serwerów lustrzanych katalogów, by nie musiał obciążać
    serwerów katalogowych. (Domyślnie: Żaden).

**WarnPlaintextPorts** __port__,__port__,__...__::
    Mówi Torowi, by wyświetlił ostrzeżenie, gdy tylko użytkownik próbuje nawiązać anonimowe
    połączenie na jeden z tych portów. Ta opcja jest do ostrzegania użytkowników
    o usługach, przy których ryzykują wysyłanie hasła otwartym tekstem. (Domyślnie:
    23,109,110,143).

**RejectPlaintextPorts** __port__,__port__,__...__::
    Jak WarnPlaintextPorts, ale zamiast otrzegania o używaniu ryzykownych portów, Tor
    odmówi wykonania połaczenia. (Domyślnie: Żaden).

**AllowSingleHopCircuits** **0**|**1**::
    When this option is set, the attached Tor controller can use relays
    that have the **AllowSingleHopExits** option turned on to build
    one-hop Tor connections.  (Default: 0)

OPCJE SERWERA
--------------

Następujące opcje są przydatne tylko dla serwerów (to jest, gdy ORPort jest
niezerowy):

**Address** __address__::
    The IP address or fully qualified domain name of this server (e.g.
    moria.mit.edu). You can leave this unset, and Tor will guess your IP
    address.  This IP address is the one used to tell clients and other
    servers where to find your Tor server; it doesn't affect the IP that your
    Tor client binds to.  To bind to a different address, use the
    *ListenAddress and OutboundBindAddress options.

**AllowSingleHopExits** **0**|**1**::
    This option controls whether clients can use this server as a single hop
    proxy. If set to 1, clients can use this server as an exit even if it is
    the only hop in the circuit.  Note that most clients will refuse to use
    servers that set this option, since most clients have
    ExcludeSingleHopRelays set.  (Default: 0)

**AssumeReachable** **0**|**1**::
    Ta opcja jest używana w czasie startu nowej sici Tora. Gdy ustawiona na 1,
    nie wykonuj tesstów własnej osiągalności; po prostu wyślij swój deskryptor serwera
    natychmiast. Jeśli **AuthoritativeDirectory** też jest włączone, ta opcja
    instruuje serwer katalogowy, by też pominął zdalne test osiągalności i podaj
    wszystkie połączone serwery jako działające.

**BridgeRelay** **0**|**1**::
    Sets the relay to act as a "bridge" with respect to relaying connections
    from bridge users to the Tor network. It mainly causes Tor to publish a
    server descriptor to the bridge database, rather than publishing a relay
    descriptor to the public directory authorities.

**ContactInfo** __adres_email__::
    Informacje o kontakt z administratorem dla tego serwera. Ta linia może być pobrana
    przez spamerów, więc możesz ukryć fakt, że jest to
    adres email.

**ExitPolicy** __polityka__,__polityka__,__...__::
    Ustaw politykę wyjścia dla tego serwera. Każda polityka ma postać
    "**accept**|**reject** __ADRES__[/__MASKA__][:__PORT__]". Jeśli /__MASKA__ zostanie
    pominięta, ta polityka ma zastosowanietylko do podanego hosta. Zamiast podawać
    hosta czy sieć, mozesz też użyć "\*", co oznacza wszystkie adresy (0.0.0.0/0).
    __PORT__ może być pojedynczym numerem portu, przediałem portów
    "__PORT_OD__-__PORT_DO__", lub "\*". Jeśli ominięto __PORT__, oznacza to
    "\*". +
 +
    Na przykład, "accept 18.7.22.69:\*,reject 18.0.0.0/8:\*,accept \*:\*" odrzuciłoby
    dowolny ruch skierowany do MIT z wyjątkiem web.mit.edu, i przyjęłoby
    cokolwiek innego. +
 +
    Aby określić wszystkie wewnętrzne i sieci lokalne (łącznie z 0.0.0.0/8,
    169.254.0.0/16,    127.0.0.0/8,    192.168.0.0/16, 10.0.0.0/8 i
    172.16.0.0/12), możesz użyć aliasu "private" zamiast adresu.
    Te adresy są odrzucane domyślnie (na początku Twojej polityki
    wyjścia), razem z Twoim publicznym adresem IP, chyba że ustawisz opcję
    ExitPolicyRejectPrivate na 0. Na przykład, gdy już to zrobisz, możesz
    zezwolić na poąłczenia HTTP do 127.0.0.1 i blokować wszystkie inne połączenia do
    sieci lokalnych poprzez "accept 127.0.0.1:80,reject private:\*", choć to
    może zezwolić na poąłczenia do Twojego własnego komputera, które są adresowane na jego
    publiczny (zewnętrzny) adres IP. Spójrz do RFC 1918 i RFC 3330 po więcej szczegółów
    odnośnie wewnętrznej i zarezerwowanej przestrzeni adresów IP. +
 +
    Ta dyrektywa może być podana wiele razy, więc nie musisz umieszczać wszystkiego
    w jednej linii. +
 +
    Polityki są brane pod uwagę od pierwszej do ostatniej, a pierwsza pasująca wygrywa. Jeśli chcesz
    \_zmienić_ domyślną politykę wyjścia, zakończ swoją politykę albo poprzez
    reject \*:* albo accept \*:*. W innym przypadku, \_powiększasz_
    (dodajesz do) domyślną politykę wyjścia. Domyślna polityka wyjścia to: +

       reject *:25
       reject *:119
       reject *:135-139
       reject *:445
       reject *:563
       reject *:1214
       reject *:4661-4666
       reject *:6346-6429
       reject *:6699
       reject *:6881-6999
       accept *:*

**ExitPolicyRejectPrivate** **0**|**1**::
    Odrzucaj wszystkie prywatne (lokalne) sieci, razem z Twoim publicznym adresem IP,
    na początku Twojej polityki wyjścia. Patrz wyżej o ExitPolicy.
    (Domyślnie: 1)

**MaxOnionsPending** __NUM__::
    Jeśli masz więcej niż ta liczba danych onionskin w kolejce do deszyfracji, odrzucaj
    nowe. (Domyślnie: 100)

**MyFamily** __węzeł__,__węzeł__,__...__::
    Zadeklaruj, że ten serwer Tora jest kontrolowany lub zarządzany przez grupę lub
    organizację identyczną lub podobną do tej z podanych serwerów, zdefiniowanych przez
    ich odciski palców tożsamości lub nazwy. Gdy dwa serwery zadeklarują, że są w
    tej samej \'rodzinie', klienci Tora nie będą ich używać w tym
    samym obwodzie. (Każdy serwer musi podać tylko pozostałe w swojej
    rodzinie; nie musi podawać siebie, ale to nie zaszkodzi.)

**Nickname** __nazwa__::
    Ustaw nazwę serwera na \'nazwa'. Nazwy muszą mieć między 1 a 19
    znaków włącznie, i muszą zawierać tylko znaki z zestawu [a-zA-Z0-9].

**NumCPUs** __num__::
    How many processes to use at once for decrypting onionskins and other
    parallelizable operations.  If this is set to 0, Tor will try to detect
    how many CPUs you have, defaulting to 1 if it can't tell.  (Default: 0)

**ORPort** __PORT__::
    Zgłoś ten port do nasłuchiwania połączeń od klientów Tora i serwerów.

**ORListenAddress** __IP__[:__PORT__]::
    Przypisz się do teo adresu do nasłuchiwania połączeń od klientów Tora i
    serwerów. Jeśli podasz port, przypnij się do tego portu zamiast do tego
    podanego w ORPort. (Domyślnie: 0.0.0.0) Ta dyrektywa może być podana
    wiele razy, by przypisać się do wielu adresów/portów.

**PortForwarding** **0**|**1**::
    Attempt to automatically forward the DirPort and ORPort on a NAT router
    connecting this Tor server to the Internet. If set, Tor will try both
    NAT-PMP (common on Apple routers) and UPnP (common on routers from other
    manufacturers). (Default: 0)

**PortForwardingHelper** __filename__|__pathname__::
    If PortForwarding is set, use this executable to configure the forwarding.
    If set to a filename, the system path will be searched for the executable.
    If set to a path, only the specified path will be executed.
    (Default: tor-fw-helper)

**PublishServerDescriptor** **0**|**1**|**v1**|**v2**|**v3**|**bridge**,**...**::
    This option specifies which descriptors Tor will publish when acting as
    a relay. You can
    choose multiple arguments, separated by commas.
 +
    If this option is set to 0, Tor will not publish its
    descriptors to any directories. (This is useful if you're testing
    out your server, or if you're using a Tor controller that handles directory
    publishing for you.) Otherwise, Tor will publish its descriptors of all
    type(s) specified. The default is "1",
    which means "if running as a server, publish the
    appropriate descriptors to the authorities".

**ShutdownWaitLength** __NUM__::
    Gdy otrzymamy SIGINT i jesteśmy serwerem, zaczynamy się wyłączać:
    zamykamy procesy nasłuchujące i zaczynamy odrzucać nowe obwody. Po **NUM**
    sekundach, wychodzimy. Jeśli dostaniemy drugi SIGINT, wychodzimy
    natychmiast. (Domyślnie: 30 sekund)

**HeartbeatPeriod**  __N__ **minutes**|**hours**|**days**|**weeks**::
    Log a heartbeat message every **HeartbeatPeriod** seconds. This is
    a log level __info__ message, designed to let you know your Tor
    server is still alive and doing useful things. Settings this
    to 0 will disable the heartbeat. (Default: 6 hours)

**AccountingMax** __N__ **bytes**|**KB**|**MB**|**GB**|**TB**::
    Never send more than the specified number of bytes in a given accounting
    period, or receive more than that number in the period. For example, with
    AccountingMax set to 1 GB, a server could send 900 MB and receive 800 MB
    and continue running. It will only hibernate once one of the two reaches 1
    GB. When the number of bytes gets low, Tor will stop accepting new
    connections and circuits.  When the number of bytes
    is exhausted, Tor will hibernate until some
    time in the next accounting period. To prevent all servers from waking at
    the same time, Tor will also wait until a random point in each period
    before waking up. If you have bandwidth cost issues, enabling hibernation
    is preferable to setting a low bandwidth, since it provides users with a
    collection of fast servers that are up some of the time, which is more
    useful than a set of slow servers that are always "available".

**AccountingStart** **day**|**week**|**month** [__dzień__] __GG:MM__::
    Określa, jak długo trwa okres liczenia. Jeśli podano **month**, każdy
    okres liczenia trwa od chwili __GG:MM__ w __dzień__ dniu jednego
    miesiąca do tego samego dnia i czasu następnego miesiąca. (Dzień musi być między 1 a
    28.) Jeśli podano **week**, każdy okres liczenia trwa od chwili __GG:MM__
    dnia __dzień__ jednego tygodnia do tego samego dnia i czasu następnego tygodnia,
    gdzie poniedziałek to dzień 1, a niedziela to dzień 7. Jeśli podano **day**, każdy
    okres liczenia trwa od chwili __GG:MM__ każdego dnia do tego samego czasu dnia
    następnego. Wszystkie czasy są lokalne i podane w formacie 24-godzinnym. (Domyślna wartość to
    "month 1 0:00".)

**RefuseUnknownExits** **0**|**1**|**auto**::
    Prevent nodes that don't appear in the consensus from exiting using this
    relay.  If the option is 1, we always block exit attempts from such
    nodes; if it's 0, we never do, and if the option is "auto", then we do
    whatever the authorities suggest in the consensus. (Defaults to auto.)

**ServerDNSResolvConfFile** __nazwapliku__::
    Zmienia domyślną konfigurację DNS na konfigurację w pliku
    __nazwapliku__. Format plik jest taki sam, jak format standardowego Uniksowego
    pliku "**resolv.conf**"(7). Ta opcja, jak wszystkie inne opcje ServerDNS,
    wpływa tylko na rozwiązywanie nazw, które Twój serwer wykonuje w imieniu klientów.
    (Domyślna wartość to używanie systemowej konfiguracji DNS.)

**ServerDNSAllowBrokenConfig** **0**|**1**::
    Jeśli ta opcja jest ustawiona na fałsz, Tor wychodzi natychmiast, gdy są problemy
    w parsowaniu systemowej konfiguracji DNS lub w łączeniu się z serwerami nazw.
    W innym przypadku, Tor kontynuuje okresowo sprawdzać systemowe serwery nazw aż
    w końcu mu się uda. (Domyślna wartość to "1".)

**ServerDNSSearchDomains** **0**|**1**::
    Jeśli ustawione na 1, będziemy szukać adresów w lokalnej domenie przeszukiwania.
    Na przykład, jesli system jest skonfigurowany tak, by wierzył, że jest w
    "example.com", a klient próbuje połaczyć się z "www", klient zostanie
    połączony z "www.example.com". Ta opcja wpływa tylko na rozwiązywanie nazw, które
    Twój serwer wykonuje w imieniu klientów. (Domyślna wartość to "0".)

**ServerDNSDetectHijacking** **0**|**1**::
    Gdy ta opcja jest ustawiona na 1, będziemy okresowo sprawdzać, 
    czy nasze lokalne serwery nazw zostały skonfigurowane, by przekierowywać nieudane żądania DNS
    (zwykle do serwisu z reklamami). Jeśli są, będziemy próbować poprawić
    to. Ta opcja wpływa tylko na rozwiązywanie nazw, które Twój serwer wykonuje
    w imieniu klientów. (Domyślna wartość to "1".)

**ServerDNSTestAddresses** __adres__,__adres__,__...__::
    Gdy wykrywamy przekierowanie nieudanych żądań DNS, upewniamy się, że te __prawidłowe__ adresy
    nie są przekierowywane. Jeśli są, nasz DNS jest kompletnie bezużyteczny,
    i resetujemy naszą politykę na "reject *:*". Ta opcja wpływa tylko
    na rozwiązywanie nazw, które Twój serwer wykonuje w imieniu klientów. (Domyślna wartość to
    "www.google.com, www.mit.edu, www.yahoo.com, www.slashdot.org".)

**ServerDNSAllowNonRFC953Hostnames** **0**|**1**::
    Gdy ta opcja jest wyłączona, Tor nie próbuje rozwiązywać nazw
    zawierających nieprawidłowe znaki (jak @ i :) zamiast wysyłać je do węzła
    wyjściowego do rozwiązania. To pomaga złapać przypadkowe próby rozwiązywania
    URLów itd. Ta opcja wpływa tylko na rozwiązywanie nazw, które Twój serwer wykonuje
    w imieniu klientów. (Domyślnie: 0)

**BridgeRecordUsageByCountry** **0**|**1**::
    Gdy ta opcja jest włączona i BridgeRelay też jest włączone, a my mamy
    dane GeoIP, Tor przechowuje licznik, według krajów, ile adresów
    klientów skontaktowało się z nim, by to mogło pomóc serwerom mostów zgadnąć,
    które kraje zablokowały dostęp do niego. (Domyślnie: 1)

**ServerDNSRandomizeCase** **0**|**1**::
    Gdy ta opcja jest ustawiona, Tor ustawia wielkość każdego znaku losowo w
    wychodzących żądaniach DNS i sprawdza, czy wielkość zgadza się w odpowiedziach DNS.
    Ta tak zwana "sztuczka 0x20" pomaga obronić się przed niektórymi atakami zatruwania DNS.
    Po więcej informacji spójrz do "Increased DNS Forgery Resistance through
    0x20-Bit Encoding". Ta opcja wpływa tylko na rozwiązywanie nazw, które Twój serwer
    wykonuje w imieniu klientów. (Domyślnie: 1)

**GeoIPFile** __nazwapliku__::
    Plik zawierajacy dane GeoIP, do używania z BridgeRecordUsageByCountry.

**CellStatistics** **0**|**1**::
    When this option is enabled, Tor writes statistics on the mean time that
    cells spend in circuit queues to disk every 24 hours. (Default: 0)

**DirReqStatistics** **0**|**1**::
    When this option is enabled, Tor writes statistics on the number and
    response time of network status requests to disk every 24 hours.
    (Default: 0)

**EntryStatistics** **0**|**1**::
    When this option is enabled, Tor writes statistics on the number of
    directly connecting clients to disk every 24 hours. (Default: 0)

**ExitPortStatistics** **0**|**1**::
    When this option is enabled, Tor writes statistics on the number of relayed
    bytes and opened stream per exit port to disk every 24 hours. (Default: 0)

**ConnDirectionStatistics** **0**|**1**::
    When this option is enabled, Tor writes statistics on the bidirectional use
    of connections to disk every 24 hours. (Default: 0)

**ExtraInfoStatistics** **0**|**1**::
    Gdy ta opcja jest włączona, Tor zawiera uprzednio zebrane statystyki w
    swoich dokumentach extra-info, które wysyła do serwerów katalogowych.
    (Domyślnie: 0)

OPCJE SERWERA KATALOGOWEGO
------------------------

Następujace opcje są przydatne tylko dla serwerów katalogowych (to jest, gdy
DirPort jest niezerowy):

**AuthoritativeDirectory** **0**|**1**::
    Gdy ta opcja jest ustawiona na 1, Tor działa jako autorytatywny serwer
    katalogowy. Zamiast zachowywać katalog, generuje własną listę
    dobrych serwerów, podpisuje ją, i wysyła ją do klientów. Jeśli klienci nie mają
    Tego serwera zapisanego jako zaufany katalog, prawdopodobnie nie chcesz
    ustawiać tej opcji. Prosimy skoordynować się z innymi administratorami na
    tor-ops@torproject.org, jeśli Twoim zdaniem Twój serwer powinien być katalogiem.

**DirPortFrontPage** __NAZWAPLIKU__::
    Gdy ta opcja jest ustawiona, bierze plik HTML i publikuje go jako "/" na
    porcie DirPort. Teraz operatorzy serwerów mogą dać dokument wypracia się odpowiedzialności bez potrzeby
    uruchamiania osobnego serwer www. Przykładowy dokument jest w
    contrib/tor-exit-notice.html.

**V1AuthoritativeDirectory** **0**|**1**::
    Gdy ta opcja jest ustawiona razem z **AuthoritativeDirectory**, Tor
    generuje katalog w wersji 1 i dokument działających routerów (dla starych
    klientów Tora do wersji 0.1.0.x).

**V2AuthoritativeDirectory** **0**|**1**::
    Gdy ta opcja jest ustawiona razem z **AuthoritativeDirectory**, Tor
    generuje statusy sieci w wersji 2 i serwuje deskryptory itd. jak
    opisano w doc/spec/dir-spec-v2.txt (dla klientów i serwerów Tora w wersjach
    0.1.1.x i 0.1.2.x).

**V3AuthoritativeDirectory** **0**|**1**::
    Gdy ta opcja jest ustawiona razem z **AuthoritativeDirectory**, Tor
    generuje statusy sieci w wersji 3 i serwuje deskryptory itd. jak
    opisano w doc/spec/dir-spec.txt (dla klientów i serwerów Tora w wersjach co
    najmniej 0.2.0.x).

**VersioningAuthoritativeDirectory** **0**|**1**::
    Gdy ta opcja jest ustawiona na 1, Tor dodaje informacje, które wersje Tora
    są bezpieczne do używania, w publikowanym katalogu. Każdy serwer autorytatywny
    w wersji 1 jest automatycznie wersjonującym serwerem autorytatywnym; serwery
    autorytatywne w wersji 2 dają te informacje opcjonalnie. Zobacz **RecommendedVersions**,
    **RecommendedClientVersions** i **RecommendedServerVersions**.

**NamingAuthoritativeDirectory** **0**|**1**::
    Gdy ta opcja jest ustawiona na 1, ten serwer zgłasza, że ma
    opinie o powiązaniach nazwa-odcisk palca. Będzie dołączał te
    opinie w publikowanych przez siebie stronach o statusie sieci, listując serwery z
    flagą "Named", jeśli prawidłowe powiązanie między nazwą i odciskiem palca
    zostało zarejestrowane na serwerze. Nazywające serwery katalogowe odmówią przyjęcia
    lub publikacji deskryptora, który przeczy zarejestrowanemu powiązaniu. Zobacz
    **approved-routers** w sekcji **PLIKI** poniżej.

**HSAuthoritativeDir** **0**|**1**::
    When this option is set in addition to **AuthoritativeDirectory**, Tor also
    accepts and serves v0 hidden service descriptors,
    which are produced and used by Tor 0.2.1.x and older. (Default: 0)

**HidServDirectoryV2** **0**|**1**::
    Gdy ta opcja jest ustawiona, Tor przyjmuje i serwuje deskryptory usług ukrytych
    w wersji 2. Ustawienie DirPort nie jest do tego wymagane, gdyż klienci
    łączą się domyślnie przez ORPort. (Domyślnie: 1)

**BridgeAuthoritativeDir** **0**|**1**::
    Gdy ta opcja jest ustawiona razem z **AuthoritativeDirectory**, Tor
    przyjmuje i serwuje deskryptory routerów, ale zapisuje i serwuje główne
    dokumenty statusu sieci zamiast generować własny. (Domyślnie: 0)

**MinUptimeHidServDirectoryV2** __N__ **seconds**|**minutes**|**hours**|**days**|**weeks**::
    Minimalny czas działania katalogu usług ukrytych w wersji 2, by być zaakceptowanym przez
    autorytatywne serwery katalogowe. (Domyślnie: 24 godziny)

**DirPort** __PORT__::
    Zgłaszaj usługę katalogową na tym porcie.

**DirListenAddress** __IP__[:__PORT__]::
    Przypisz usługę katalogową do tego adresu. Jeśli podasz port, przypisz do
    tego portu zamiast do tego podanego w DirPort.  (Domyślnie: 0.0.0.0)
    Ta dyrektywa może być podana wiele razy, by przypisać się do wielu
    adresów/portów.

**DirPolicy** __polityka__,__polityka__,__...__::
    Ustaw politykę wejściową tego serwera, by ograniczyć to, kto może połączyć się z
    portami katalogowymi. Polityki mają ten sam format co polityki wyjścia powyżej.

OPCJE AUTORATYWNEGO SERWERA KATALOGOWEGO
----------------------------------

**RecommendedVersions** __NAPIS__::
    NAPIS jest rozdzieloną przecinkami listą wersji Tora obecnie uznawanych za
    bezpieczne. Lista jest włączana w każdym katalogu, a węzły pobierające ten
    katalog dowiadują się, czy muszą się zaktualizować. Ta opcja może pojawić się
    wiele razy: wartości z różnych linii są łączone razem. Jeśli
    to jest ustawione, **VersioningAuthoritativeDirectory** też powinno być ustawione.

**RecommendedClientVersions** __NAPIS__::
    NAPIS jest rozdzieloną przecinkami listą wersji Tora obecnie uznawanych za
    bezpieczne dla klientów. Ta informacja jest dołączana do katalogów
    wersji 2. Jeśli to nie jest ustawione, brana jest wartość **RecommendedVersions**.
    Gdy to jest ustawione, **VersioningAuthoritativeDirectory** też
    powinno być ustawione.

**RecommendedServerVersions** __NAPIS__::
    NAPIS jest rozdzieloną przecinkami listą wersji Tora obecnie uznawanych za
    bezpieczne dla serwerów. Ta informacja jest dołączana do katalogów
    wersji 2. Jeśli to nie jest ustawione, brana jest wartość **RecommendedVersions**.
    Gdy to jest ustawione, **VersioningAuthoritativeDirectory** też
    powinno być ustawione.

**ConsensusParams** __NAPIS__::
    NAPIS jest rozdzieloną spacjami listą par klucz=wartość, które Tor dołączy
    w linii "params" swojego głosu networkstatus.

**DirAllowPrivateAddresses** **0**|**1**::
    Gdy ustawione na 1, Tor będzie przyjmował reskryptory routerów z dowolnymi elemenatmi
    "Address". W innym przypadku, jeśli adres nie jest adresem IP lub jest prywatnym adresem
    IP, Tor odrzuci deskryptor routera. Domyślna wartość to 0.

**AuthDirBadDir** __WzorzecAdresów...__::
    Tylko dla autorytatywnych serwerów katalogowych. Zestaw wzorców adresów dla serwerów, który
    będzie podany jako złe serwery katalogowe w każdym dokumencie statusu sieci
    wydanym przez ten serwer, jeśli ustawiono **AuthDirListBadDirs**.

**AuthDirBadExit** __WzorzecAdresów...__::
    Tylko dla autorytatywnych serwerów katalogowych. Zestaw wzorców adresów dla serwerów, który
    będzie podany jako złe serwery wyjściowe w każdym dokumencie statusu sieci
wydanym
    przez ten serwer, jeśli ustawiono **AuthDirListBadExits**.

**AuthDirInvalid** __WzorzecAdresów...__::
    Tylko dla autorytatywnych serwerów katalogowych. Zestaw wzorców adresów dla serwerów, który
    nigdy nie będzie podany jako prawidłowy ("valid") w każdym dokumencie statusu sieci
wydanym
    przez ten serwer.

**AuthDirReject** __WzorzecAdresów__...::
    Tylko dla autorytatywnych serwerów katalogowych. Zestaw wzorców adresów dla serwerów, który
    nigdy nie będzie podany w każdym dokumencie statusu sieci
    wydanym przez ten serwer lub przyjęty jako adres OR w jakimś deskryptorze
    wysłanym do publikacji przez ten serwer.

**AuthDirListBadDirs** **0**|**1**::
    Tylko dla autorytatywnych serwerów katalogowych. Gdy ustawione na 1, ten serwer ma jakieś
    opinie o tym, które węzły są nieprzydatne jako pamięci podręczne katalogów. (Nie ustawiaj
    tego na 1, chyba że planujesz podawać niefunkcjonalne katalogi jako złe;
    w innym przypadku efektywnie głosujesz na korzyść każdego zadeklarowanego
    katalogu.)

**AuthDirListBadExits** **0**|**1**::
    Tylko dla autorytatywnych serwerów katalogowych. Gdy ustawione na 1, ten serwer ma jakieś
    opinie o tym, które węzły są nieprzydatne jako węzły wyjściowe. (Nie ustawiaj tegona
    1, chyba że planujesz podawać niefunkcjonalne serweryu wyjściowe jako złe; w innym przypadku
    efektywnie głosujesz na korzyść każdego zadeklarowanego serwera wyjściowego.)

**AuthDirRejectUnlisted** **0**|**1**::
    Tylko dla autorytatywnych serwerów katalogowych. Gdy ustawione na 1, serwer katalogowy odrzuca
    wszystkie przysłane deskryptory serwerów, które nie są jawnie podane w
    pliku z odciskami palców. To działa jak "guzik wyłączenia", gdy zostaniemy zaatakowani atakiem
    Sybil. (Domyślnie: 0)

**AuthDirMaxServersPerAddr** __NUM__::
    Tylko dla autorytatywnych serwerów katalogowych. Maksymalna liczba serwerów, które będziemy
    podawać jako akceptowalne na jednym adresie IP. Ustaw na "0", by uzyskać "bez ograniczeń".
    (Domyślnie: 2)

**AuthDirMaxServersPerAuthAddr** __NUM__::
    Tylko dla autorytatywnych serwerów katalogowych. Jak AuthDirMaxServersPerAddr, ale ma zastosowanie
    dla adresów współdzielonych z serwerami katalogowymi. (Domyślnie: 5)

**V3AuthVotingInterval** __N__ **minutes**|**hours**::
    Tylko dla autorytatywnych serwerów katalogowych w wersji 3. Ustawia preferowany przez serwer interwał
    głosowania. Głosowanie odbędzie się __realnie__ w chwili  wybranej
    przez konsensus z preferowanych interwałów wszystkich serwerów. Ten okres
    POWINIEN dzielić się równo w dniu. (Domyślnie: 1 godzina)

**V3AuthVoteDelay** __N__ **minutes**|**hours**::
    Tylko dla autorytatywnych serwerów katalogowych w wersji 3. Ustawia preferowane przez serwer opóźnienie
    między opublikowaniem swojego głosu a założeniem, że otrzymał głosy ze wszystkich innych
    serwerów. Realny czas używany nie jest preferowanym czasem
    serwera, ale konsensusem między wszystkimi preferencjami. (Domyślnie: 5 minut.)

**V3AuthDistDelay** __N__ **minutes**|**hours**::
    Tylko dla autorytatywnych serwerów katalogowych w wersji 3. Ustawia preferowane przez serwer opóźnienie
    między opublikowaniem swojego konsensusu i podpisu a założeniem, że otrzymał wszystkie podpisy
    ze wszystkich innych serwerów. Realny czas używany
    nie jest preferowanym czasem serwera, ale konsensusem między wszystkimi preferencjami.
    (Domyślnie: 5 minut.)

**V3AuthNIntervalsValid** __NUM__::
    Tylko dla autorytatywnych serwerów katalogowych w wersji 3. Ustawia liczbę VotingIntervals,
    przez które powinien konsensus być ważny. Wybieranie wysokich liczb
    zwiększa ryzyko podziału sieci; wybieranie niskich liczb zwiększa ruch
    w katalogach. Realna liczba wykorzystywanych interwałów nie jest preferowaną
    liczbą serwera, ale konsensusem między wszystkimi preferencjami. Musi wynosić co
    najmniej 2. (Domyślnie: 3.)

**V3BandwidthsFile** __FILENAME__::
    V3 authoritative directories only. Configures the location of the
    bandiwdth-authority generated file storing information on relays' measured
    bandwidth capacities. (Default: unset.)

OPCJE USŁUG UKRYTYCH
----------------------

Następujace opcje są używane do konfigurowania usługi ukrytej.

**HiddenServiceDir** __KATALOG__::
    Przechowuj pliki danych usługi w katalogu KATALOG. Każda usługa  ukryta
    musi mieć oddzielny katalog. Możesz używać tej opcji wiele razy, by
    określić wiele usług.

**HiddenServicePort** __WIRTPORT__ [__CEL__]::
    Konfiguruje port wirtualny WIRTPORT dla usługi ukrytej. Możesz użyć tej
    opcji wiele razy; każdym razem ma zastosowanie do usługi używającej ostatniej
    linii hiddenservicedir. Domyślnie ta opcja mapuje wirtualny port no
    ten sam port na 127.0.0.1. Możesz zmienić port docelowy, adres, lub
    oba podając cel w postaci adresu, portu lub pary adres:port. Możesz też mieć
    wiele linii z tym samym portem WIRTPORT: gdy użytkownik połączy się z tym
    portem WIRTPORT, jeden z CELów z tych linii zostanie wybrany losowo.

**PublishHidServDescriptors** **0**|**1**::
    Jeśli ustawione na 0, Tor będzie prowadził wszystkie skonfigurowane usługi ukryte, ale nie
    wyśle ich do katalogu punktów spotkań. Ta opcja jest przydatna tylko jeśli
    używasz kontrolera Tora, który za Ciebie zajmuje się publikowaniem usług ukrytych.
    (Domyślnie: 1)

**HiddenServiceVersion** __wersja__,__wersja__,__...__::
    Lista wersji deskryptorów usług spotkań do publikacji dla usługi
    ukrytej. W chwili obecnej obsługiwana jest tylko wersja 2. (Domyślnie: 2)

**HiddenServiceAuthorizeClient** __typ-uwierz__ __nazwa-klienta__,__nazwa-klienta__,__...__::
    Jeśli skonfigurowane, usługa ukryta jest dostępna tylko dla uwierzytelnionych klientów.
    Parametr typ-uwierz może być albo \'basic' dla protokołu uwierzytelniania
    ogólnego przeznaczenia lub \'stealth' dla mniej skalowalnego protokołu, który także
    ukrywa działalność usługi ukrytej przed nieupoważnionymi klientami. Tylko podani tu klienci mają
    dostęp do usługi ukrytej. Prawidłowe nazwy klientów
    mają od 1 do 19 znaków z zestawu A-Za-z0-9+-_ (bez
    spacji). Jeśli ta opcja jest ustawiona, usługa ukryta nie jest już dostępna dla
    klientów bez upoważnienia. Wygenerowane dane upoważniające można znaleźć
    w pliku hostname. Klienci muszą umieścić te dane upoważniające w
    swoich plikach konfiguracyjnych, używając **HidServAuth**.

**RendPostPeriod** __N__ **seconds**|**minutes**|**hours**|**days**|**weeks**::
    Every time the specified period elapses, Tor uploads any rendezvous 
    service descriptors to the directory servers. This information  is also
    uploaded whenever it changes. (Default: 1 hour)

OPCJE TESTOWANIA SIECI
-----------------------

Następujące opcje są używane do uruchamiania testowej sieci Tora.

**TestingTorNetwork** **0**|**1**::
    Gdy ustawione na 1, Tor zmienia domyślne wartości poniższych opcji konfiguracji,
    by łatwiej było uruchomić testową sieć Tora. Może być ustawiona tylko gdyf
    ustawiono niedomyślny zestaw serwerów DirServers. Nie można wyłączyć w czasie działania Tora.
    (Domyślnie: 0) +

       ServerDNSAllowBrokenConfig 1
       DirAllowPrivateAddresses 1
       EnforceDistinctSubnets 0
       AssumeReachable 1
       AuthDirMaxServersPerAddr 0
       AuthDirMaxServersPerAuthAddr 0
       ClientDNSRejectInternalAddresses 0
       ClientRejectInternalAddresses 0
       ExitPolicyRejectPrivate 0
       V3AuthVotingInterval 5 minutes
       V3AuthVoteDelay 20 seconds
       V3AuthDistDelay 20 seconds
       MinUptimeHidServDirectoryV2 0 seconds
       TestingV3AuthInitialVotingInterval 5 minutes
       TestingV3AuthInitialVoteDelay 20 seconds
       TestingV3AuthInitialDistDelay 20 seconds
       TestingAuthDirTimeToLearnReachability 0 minutes
       TestingEstimatedDescriptorPropagationTime 0 minutes

**TestingV3AuthInitialVotingInterval** __N__ **minutes**|**hours**::
    Jak V3AuthVotingInterval, ale dla wstępnego głosowania przed stworzeniem
    pierwszego konsensusu. Zmiana tego wymaga, by było ustawione
    **TestingTorNetwork**. (Domyślnie: 30 minut)

**TestingV3AuthInitialVoteDelay** __N__ **minutes**|**hours**::
    Jak TestingV3AuthInitialVoteDelay, ale dla wstępnego głosowania przed stworzeniem
    pierwszego konsensusu. Zmiana tego wymaga, by było ustawione
    **TestingTorNetwork**. (Domyślnie: 5 minut)

**TestingV3AuthInitialDistDelay** __N__ **minutes**|**hours**::
    Jak TestingV3AuthInitialDistDelay, ale dla wstępnego głosowania przed stworzeniem
    pierwszego konsensusu. Zmiana tego wymaga, by było ustawione
    **TestingTorNetwork**. (Domyślnie: 5 minut)

**TestingAuthDirTimeToLearnReachability** __N__ **minutes**|**hours**::
    Po uruchomieniu serwera autoratywnego, nie rób założeń o tym, czy routery
    działają, zanim nie upłynie ten czas. Zmiana tego wymaga, by było ustawione
    **TestingTorNetwork**.  (Domyślnie: 30 minut)

**TestingEstimatedDescriptorPropagationTime** __N__ **minutes**|**hours**::
    Klienci próbują pobierać deskryptory routerów z pamięci podręcznej katalogów po tym
    czasie. Zmiana tego wymaga, by było ustawione **TestingTorNetwork**. (Domyślnie:
    10 minut)

SYGNAŁY
-------

Tor łapie następujące sygnały:

**SIGTERM**::
    Tor złapie go, wyczyści stan i zsynchronizuje się na dysk, jeśli potrzeba, po czym wyjdzie.

**SIGINT**::
    Klienci Tora zachowują się jak z SIGTERM; ale serwery Tora wykonają kontrolowane,
    powolne zamknięcie, zamykając procesy nasłuchujące i czekając 30 sekund przed wyjściem.
    (Opóźnienie może być ustawione opcją konfiguracji ShutdownWaitLength.)

**SIGHUP**::
    The signal instructs Tor to reload its configuration (including closing and
    reopening logs), and kill and restart its helper processes if applicable.

**SIGUSR1**::
    Zapisz statystyki o bieżących połączeniach, dawnych połaczeniach i przepustowości.

**SIGUSR2**::
    Przełącz wszystkie logi na poziom logowania debug. Możesz powrócić do poprzednich poziomów poprzez
    wysłanie SIGHUP.

**SIGCHLD**::
    Tor otrzymuje ten sygnał, gdy jeden z jego procesów pomocniczych się zakończył, by mógł
    posprzątać.

**SIGPIPE**::
    Tor łapie ten sygnał i ignoruje go.

**SIGXFSZ**::
    Jeśli ten sygnał istnieje na Twojej platformie, Tor łapie go i ignoruje.

PLIKI
-----

**@CONFDIR@/torrc**::
    Plik konfiguracji, zawierający pary "opcja wartość".

**@LOCALSTATEDIR@/lib/tor/**::
    Proces Tora zapisuje tu klucze i inne dane.

__DataDirectory__**/cached-status/**::
    Ostanio pobrany dokument statusu sieci dla kazdego serwera katalogowego.
    Każdy plik zawiera jeden taki dokument; nazwy plików są szesnastkowymi
    odciskami palców kluczy tożsamosci serwerów katalogowych.

__DataDirectory__**/cached-descriptors** i **cached-descriptors.new**::
    Te pliki zawierają pobrane statusy routerów. Niektóre routery mogą pojawić się więcej
    niż raz; jeśli tak jest, używany jest ostatnio opublikowany deskryptor. Linie
    zaczynające się znakami @ są adnotacjami zawierającymi więcej informacji o
    danym routerze. Plik ".new" jest dziennikiem, do którego można tylko dopisywać; gdy urośnie
    za duży, wszystkie wpisy są łączone w nowy plik z zapisanymi deskryptorami.

__DataDirectory__**/cached-routers** i **cached-routers.new**::
    Przestarzale wersje plików cached-descriptors i cached-descriptors.new. Gdy
    Tor nie może znaleźć nowszych plików, sprawdza te.

__DataDirectory__**/state**::
    Zestaw trwałych odwzorowań klucz-wartość. Są one udokumentowane
    w tym pliku. Zawierają one:
            - Bieżących strażników wejściowych i ich status.
            - Bieżące wartości obliczania przepustowości łącza (na razie nieużywane; patrz
            niżej).
            - Kiedy ten plik został ostatnio zapisany
            - Która wersja Tora wygenerowała ten plik stanu
            - Krótką historię wykorzystania łącza, wyprodukowaną w deskryptorach
            routerów.

__DataDirectory__**/bw_accounting**::
    Używany do śledzenia wartości obliczania przepustowości łączą (gdy bieżący okres zaczyna się
    i kończy; ile dotychczas odczytano i zapisano w bieżącym okresie). Ten plik
    jest przestarzały, a dane są teraz przechowywane też w pliku \'state'. Używany
    tylko, gdy właczone jest liczenie przepustowości.

__DataDirectory__**/control_auth_cookie**::
    Używane do uwierzytelniania ciasteczkami z kontrolerem. Lokalizacja może być
    zmieniona opcją konfiguracji CookieAuthFile. Regenerowany w czasie startu. Zobacz
    control-spec.txt, by poznać szczegóły. Używane tylko, gdy włączone jest uwierzytelnianie
    ciasteczkami.

__DataDirectory__**/keys/***::
    Używane tylko przez serwery. Trzyma klucze tożsamości i klucze onion.

__DataDirectory__**/fingerprint**::
    Używane tylko przez serwery. Trzyma odcisk palca klucza tożsamości serwera.

__DataDirectory__**/approved-routers**::
    Tylko dla nazywających autorytatywnych serwerów katalogowych (patrz
    **NamingAuthoritativeDirectory**). Ten plik zawiera powiązania nazw z tożsamościami.
    Każda linia podaje nazwę i odcisk palca oddzielone znakami
    białymi. Zobacz swój plik **fingerprint** w katalogu __DataDirectory__, dla przykładowej
    linii. Jeśli nazwą jest **!reject**, to deskryptory z podanej
    tożsamości (odcisku palca) są odrzucane przez ten serwer. Jeśli nazwą jest
    **!invalid**, to deskryptory są przyjmowane, ale zaznaczane w katalogu jako
    nieprawidłowe, to jest, nie zalecane.

__DataDirectory__**/router-stability**::
    Tylko dla  autorytatywnych serwerów katalogowych. Śledzi pomiary
    średnich czasów między awariami routerów, by serwery katalogowe dobrze wiedziały, jak
    ustawić ich flagę Stable.

__HiddenServiceDirectory__**/hostname**::
    Nazwa domenowa <base32-encoded-fingerprint>.onion dla tej usługi ukrytej.
    Jeśli dostep do usługi ukrytej jest ograniczony tylko dla upoważnionych klientów, ten plik
    zawiera też dane upoważniające dla wszystkich klientów.

__HiddenServiceDirectory__**/private_key**::
    Klucz prywatny tej usługi ukrytej.

__HiddenServiceDirectory__**/client_keys**::
    Dane uwierzytelniające dla usługi ukrytej, która jest dostępna tylko dla
    upoważnionych klientów.

ZOBACZ TEŻ
--------
**privoxy**(1), **tsocks**(1), **torify**(1) +

**https://www.torproject.org/**


BŁĘDY
----

Zapewne dużo. Tor jest ciagle w rozwoju. Prosimy je zgłaszać.

AUTORZY
-------
Roger Dingledine [arma at mit.edu], Nick Mathewson [nickm at alum.mit.edu].

