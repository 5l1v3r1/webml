## translation metadata
# Revision: $Revision$

#include "head.wmi" TITLE="Volunteer"

<div class="main-column">

<!-- PUT CONTENT AFTER THIS TAG -->
<h2>Four things everyone can do now:</h2>
<ol>
<li> Please consider <a href="<cvssandbox>tor/doc/tor-doc-server.html">running
a server</a> to help the Tor network grow.</li>
<li> Take a look at the <a href="<page gui/index>">Tor GUI Competition</a>, and
contribute to making Tor's interface
and usability better. Free Tor T-shirt for each submission!</li>
<li> Tell your friends! Get them to run servers. Get them to run hidden
services. Get them to tell their friends.</li>
<li> We are looking for funding and sponsors. If you like Tor's goals, please
  <a href="<page donate>">take a moment to donate to support further
  Tor development</a>. Also, if you know any
  companies, NGOs, or other organizations that want communications
  security, let them know about us.</li>
</ol>

<a id="Bugs"></a>
<h2><a class="anchor" href="#Bugs">Critical bugs</a></h2>
<ol>
<li>Tor servers are not stable on Windows XP currently,
because we try to use hundreds of sockets, and the
Windows kernel doesn't seem capable of handling this. <a
href="http://wiki.noreply.org/noreply/TheOnionRouter/WindowsBufferProblems">Please
help us solve this!</a> It is the number one problem with growing
the Tor network currently.</li>
</ol>

<!--
<a id="Installers"></a>
<h2><a class="anchor" href="#Installers">Installers</a></h2>
<ol>
<li>Matt Edman has written an <a
href="http://freehaven.net/~edmanm/torcp/download.html">NSIS-based
Windows installer bundle that
includes Privoxy and TorCP</a>. Can you help make it more stable and
featureful?
</li>
<li>Develop a way to handle OS X uninstallation
that is more automated than telling people to
<a href="<cvssandbox>tor/doc/tor-doc-osx.html#uninstall">manually remove
each file</a>. It needs to have a way to click it into action.</li>
<li>Our <a href="<cvssandbox>tor/tor.spec.in">RPM spec file</a>
needs a maintainer, so we can get back to the business of writing Tor. If
you have RPM fu, please help out.</li>
</ol>
-->

<a id="Usability"></a>
<h2><a class="anchor" href="#Usability">Usability and Interface</a></h2>
<ol>
<li><a
href="http://tor.eff.org/cvs/tor/doc/tor-switchproxy.html">SwitchProxy</a>
is more complex than we need. It has confusing options like "anonymous"
proxies that aren't really anonymous. Plus, the user needs to manually
type in things like "localhost" and "8118". Should we offer our own
adapted plugin that has suitable defaults for Tor pre-assigned?
Also, I hear SwitchProxy is not as compatible with Firefox 1.5 -- are
other plugins like ProxyButton more flexible across versions?</li>
<li>We need a way to intercept DNS requests so they don't "leak" while
we're trying to be anonymous. (This happens because the application does
the DNS resolve before going to the SOCKS proxy.) One option is to use
Tor's built-in support for doing DNS resolves; but you need to ask via
our new socks extension for that, and no applications do this yet. A
nicer option is to use Tor's controller interface: you intercept the
DNS resolve, tell Tor about the resolve, and Tor replies with a dummy IP
address. Then the application makes a connection through Tor to that dummy
IP address, and Tor automatically maps it back to the original query.</li>
<li>People running servers tell us they want to have one BandwidthRate
during some part of the day, and a different BandwidthRate at other parts
of the day. Rather than coding this inside Tor, we should have a little
script that speaks via the <a href="<page gui/index>">Tor Controller Interface</a>,
and does a setconf to change the bandwidth rate. Perhaps it would run out
of cron, or perhaps it would sleep until appropriate times and then do
its tweak (that's probably more portable). Can somebody write one for us
and we'll put it into <a href="<cvssandbox>tor/contrib/">tor/contrib/</a>?</li>
<li>We have a variety of ways to <a
href="http://wiki.noreply.org/noreply/TheOnionRouter/TorFAQ#ChooseEntryExit">exit
the Tor network from a particular country</a>, but they all
require specifying the nickname of a particular Tor server. It
would be nice to be able to specify just a country, and
have something automatically pick. This requires having some
component that knows what country each Tor node is in. The <a
href="http://serifos.eecs.harvard.edu/cgi-bin/exit.pl">script on
serifos</a> manually parses whois entries for this. Maybe geolocation
data will also work?</li>
<li>Speaking of geolocation data, somebody should draw a map of the Earth
with a pin-point for each Tor server. Bonus points if it updates as the
network grows and changes.</li>
<li>Tor provides anonymous connections, but we don't support
keeping multiple pseudonyms in practice (say, in case you
frequently go to two websites and if anybody knew about both of
them they would conclude it's you). We should find a good approach
and interface for handling pseudonymous profiles in Tor. See <a
href="http://archives.seul.org/or/talk/Dec-2004/msg00086.html">this
post</a> and <a
href="http://archives.seul.org/or/talk/Jan-2005/msg00007.html">followup</a>
for details.</li>
</ol>

<a id="Documentation"></a>
<h2><a class="anchor" href="#Documentation">Documentation</a></h2>
<ol>
<li>Please volunteer to help maintain this website: code, content,
css, layout. Step one is to hang out on the IRC channel until we
get to know you.</li>
<li>We have too much documentation --- it's spread out too much and
duplicates itself in places. Please send us patches, pointers, and
confusions about the documentation so we can clean it up.</li>
<li>Help translate the web page and documentation into other
languages. See the <a href="<page translation>">translation
guidelines</a> if you want to help out. We also need people to help
maintain the existing Italian, French, and Swedish translations -
see the <a href="<page translation-status>">translation status
overview</a>.</li>
<li>Investigate privoxy vs. freecap vs. sockscap for win32 clients. Are
there usability or stability issues that we can track down and
resolve, or at least inform people about?</li>
<li>Can somebody help Matt Edman with the documentation and how-tos
for his <a href="http://freehaven.net/~edmanm/torcp/">Windows Tor
Controller</a>?</li>
<li>Evaluate and document
<a href="http://wiki.noreply.org/wiki/TheOnionRouter/TorifyHOWTO">our
list of programs</a> that can be configured to use Tor.</li>
<li>We need better documentation for dynamically intercepting
connections and sending them through Tor. tsocks (Linux), dsocks (BSD),
and freecap (Windows) seem to be good candidates.</li>
<li>We have a huge list of <a href="http://wiki.noreply.org/noreply/TheOnionRouter/SupportPrograms">potentially useful
programs that interface to Tor</a>. Which ones are useful in which
situations? Please help us test them out and document your results.</li>
</ol>

<a id="Coding"></a>
<h2><a class="anchor" href="#Coding">Coding and Design</a></h2>
<ol>
<li>We recommend Privoxy as a good scrubbing web proxy, but it's
unmaintained and still has bugs, especially on Windows. While we're at
it, what sensitive information is not kept safe by Privoxy? Are there
other scrubbing web proxies that are more secure?</li>
<li>tsocks appears to be unmaintained: we have submitted several patches
with no response. Can somebody volunteer to start maintaining a new
tsocks branch? We'll help.</li>
<li>Right now the hidden service descriptors are being stored on just a few
directory servers. This is bad for privacy and bad for robustness. To get
more robustness, we're going to need to make hidden service descriptors
even less private because we're going to have to mirror them onto many
places. Ideally we'd like to separate the storage/lookup system from the
Tor directory servers entirely. Any reliable distributed storage system
will do, as long as it allows authenticated updates. As far as we know,
no implemented DHT code supports authenticated updates. What's the right
next step?</li>
<li>Tor exit servers need to do many DNS resolves in parallel. But
gethostbyname() is poorly designed --- it blocks until it has finished
resolving a query --- so it requires its own thread or process. So Tor
is forced to spawn many separate DNS "worker" threads. There are some
asynchronous DNS libraries out there, but historically they are buggy and
abandoned. Are any of them stable, fast, clean, and free software? (Remember,
Tor uses OpenSSL, and OpenSSL is (probably) not compatible with the GPL, so
any GPL libraries are out of the running.) If so
(or if we can make that so), we should integrate them into Tor. See <a
href="http://archives.seul.org/or/talk/Sep-2005/msg00001.html">Agl's
post</a> for one potential approach. Also see
<a href="http://daniel.haxx.se/projects/c-ares/">c-ares</a> and
<a href="http://www.monkey.org/~provos/libdnsres/">libdnsres</a>.
</li>
<li>Tor 0.1.1.x includes support for hardware crypto accelerators via
OpenSSL. Nobody has ever tested it, though. Does somebody want to get
a card and let us know how it goes?</li>
<li>Because Tor servers need to store-and-forward each cell they handle,
high-bandwidth Tor servers end up using dozens of megabytes of memory
just for buffers. We need better heuristics for when to shrink/expand
buffers. Maybe this should be modelled after the Linux kernel buffer
design, where you have many smaller buffers that link to each other,
rather than monolithic buffers?</li>
<li>How do ulimits work on Win32, anyway? We're having problems,
especially on older Windowses with people running out of file
descriptors, connection buffer space, etc. (We should handle
WSAENOBUFS as needed, look at the MaxConnections registry entry,
look at the MaxUserPort entry, and look at the TcpTimedWaitDelay
entry. We may also want to provide a way to set them as needed. See <a
href="http://bugs.noreply.org/flyspray/index.php?do=details&amp;id=98">bug
98</a>.)</li>
<li>Patches to Tor's autoconf scripts. First, we'd like our configure.in
to handle cross-compilation, e.g. so we can build Tor for obscure
platforms like the Linksys WRTG54. Second, we'd like the with-ssl-dir
option to disable the search for ssl's libraries.</li>
<li>Implement reverse DNS requests inside Tor (already specified in
Section 5.4 of <a href="<cvssandbox>tor/doc/tor-spec.txt">tor-spec.txt</a>).</li>
<li>Perform a security analysis of Tor with <a
href="http://en.wikipedia.org/wiki/Fuzz_testing">"fuzz"</a>. Determine
if there are good fuzzing libraries out there for what we want. Win fame by
getting credit when we put out a new release because of you!</li>
<li>How hard is it to patch bind or a DNS proxy to redirect requests to
Tor via our <a href="http://wiki.noreply.org/noreply/TheOnionRouter/TorFAQ#CompatibleApplications">tor-resolve socks extension</a>? What about to convert UDP DNS
requests to TCP requests and send them through Tor?</li>
<li>Tor uses TCP for transport and TLS for link
encryption. This is nice and simple, but it means all cells
on a link are delayed when a single packet gets dropped, and
it means we can only reasonably support TCP streams. We have a <a
href="http://wiki.noreply.org/noreply/TheOnionRouter/TorFAQ#TransportIPnotTCP">list
of reasons why we haven't shifted to UDP transport</a>, but it would be
great to see that list get shorter.</li>
<li>We're not that far from having IPv6 support for destination addresses
(at exit nodes). If you care strongly about IPv6, that's probably the
first place to start.</li>
</ol>

<a id="Research"></a>
<h2><a class="anchor" href="#Research">Research</a></h2>
<ol>
<li>The "website fingerprinting attack": make a list of a few
hundred popular websites, download their pages, and make a set of
"signatures" for each site. Then observe a Tor client's traffic. As
you watch him receive data, you quickly approach a guess about which
(if any) of those sites he is visiting. First, how effective is
this attack on the deployed Tor codebase? Then start exploring
defenses: for example, we could change Tor's cell size from 512
bytes to 1024 bytes, we could employ padding techniques like <a
href="http://freehaven.net/anonbib/#timing-fc2004">defensive dropping</a>,
or we could add traffic delays. How much of an impact do these have,
and how much usability impact (using some suitable metric) is there from
a successful defense in each case?</li>
<li>The "end-to-end traffic confirmation attack":
by watching traffic at Alice and at Bob, we can <a
href="http://freehaven.net/anonbib/#danezis:pet2004">compare
traffic signatures and become convinced that we're watching the same
stream</a>. So far Tor accepts this as a fact of life and assumes this
attack is trivial in all cases. First of all, is that actually true? How
much traffic of what sort of distribution is needed before the adversary
is confident he has won? Are there scenarios (e.g. not transmitting much)
that slow down the attack? Do some traffic padding or traffic shaping
schemes work better than others?</li>
<li>The "routing zones attack": most of the literature thinks of
the network path between Alice and her entry node (and between the
exit node and Bob) as a single link on some graph. In practice,
though, the path traverses many autonomous systems (ASes), and <a
href="http://freehaven.net/anonbib/#feamster:wpes2004">it's not uncommon
that the same AS appears on both the entry path and the exit path</a>.
Unfortunately, to accurately predict whether a given Alice, entry,
exit, Bob quad will be dangerous, we need to download an entire Internet
routing zone and perform expensive operations on it. Are there practical
approximations, such as avoiding IP addresses in the same /8 network?</li>
<li>Tor doesn't work very well when servers have asymmetric bandwidth
(e.g. cable or DSL). Because Tor has separate TCP connections between
each hop, if the incoming bytes are arriving just fine and the outgoing
bytes are all getting dropped on the floor, the TCP push-back mechanisms
don't really transmit this information back to the incoming streams.
Perhaps Tor should detect when it's dropping a lot of outgoing packets,
and rate-limit incoming streams to regulate this itself? I can imagine
a build-up and drop-off scheme where we pick a conservative rate-limit,
slowly increase it until we get lost packets, back off, repeat. We
need somebody who's good with networks to simulate this and help design
solutions; and/or we need to understand the extent of the performance
degradation, and use this as motivation to reconsider UDP transport.</li>
<li>A related topic is congestion control. Is our
current design sufficient once we have heavy use? Maybe
we should experiment with variable-sized windows rather
than fixed-size windows? That seemed to go well in an <a
href="http://www.psc.edu/networking/projects/hpn-ssh/theory.php">ssh
throughput experiment</a>. We'll need to measure and tweak, and maybe
overhaul if the results are good.</li>
<li>To let dissidents in remote countries use Tor without being blocked
at their country's firewall, we need a way to get tens of thousands of
relays, not just a few hundred. We can imagine a Tor client GUI that
has a "help China" button at the top that opens a port and relays a
few KB/s of traffic into the Tor network. (A few KB/s shouldn't be too
much hassle, and there are few abuse issues since they're not being exit
nodes.) But how do we distribute a list of these volunteer clients to the
good dissidents in an automated way that doesn't let the country-level
firewalls intercept and enumerate them? Probably needs to work on a
human-trust level. See our <a
href="http://wiki.noreply.org/noreply/TheOnionRouter/TorFAQ#China">FAQ
entry</a> on this, and then read the <a
href="http://freehaven.net/anonbib/topic.html#Communications_20Censorship">censorship
resistance section of anonbib</a>.</li>
<li>Tor circuits are built one hop at a time, so in theory we have the
ability to make some streams exit from the second hop, some from the
third, and so on. This seems nice because it breaks up the set of exiting
streams that a given server can see. But if we want each stream to be safe,
the "shortest" path should be at least 3 hops long by our current logic, so
the rest will be even longer. We need to examine this performance / security
tradeoff.</li>
<li>It's not that hard to DoS Tor servers or dirservers. Are client
puzzles the right answer? What other practical approaches are there? Bonus
if they're backward-compatible with the current Tor protocol.</li>
</ol>

<a href="<page contact>">Let us know</a> if you've made progress on any
of these!

  </div><!-- #main -->

#include <foot.wmi>
